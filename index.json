[{"authors":null,"categories":null,"content":"I am a Postdoctoral Researcher at Institute for Software Research (ISR), Carnegie Mellon University. I am working with Dr. Eunsuk Kang on the fairness and safety of high-assurance AI based software systems. Prior to that, I completed my Ph.D. in Computer Science from Iowa State University (ISU) under the supervision of Dr. Hridesh Rajan. For my dissertation, I worked on verifying and reasoning algorithmic fairness in machine learning pipeline.\nResearch My research interests are in the intersection of Software Engineering (SE), Programming Languages (PL), and Artificial Intelligence (AI). Broadly, I am focusing on SE for AI, and engineering AI based software systems for fairness, safety, and robustness. Especially, my works on fairness verification (ICSE'23), causal reasoning (FSE'22), root cause study (FSE'21) and compositional analysis (ICSE'23), have established fairness as a critical non-functional property of AI based software. Some of my recent works also focus on the AI software architecture (ICSE'22) and ML technical debts (FSE'22) in the open source.\nMy research continues to combine the formal analysis and design of dependable software, and its application in the real-world. Prior to joining CMU, I worked in the NSF TRIPODS Institute D4 (Dependable Data-Driven Discovery) at ISU during my Ph.D. Furthermore, I worked on the Boa compiler and DSL for conducting large scale mining and program analysis. Especially, I built Python language support for Boa to analyze ML programs and Jupyter Notebooks.\nDownload my curriculum vitae. Feel free to reach out.\n","date":1684117533,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1684117533,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am a Postdoctoral Researcher at Institute for Software Research (ISR), Carnegie Mellon University. I am working with Dr. Eunsuk Kang on the fairness and safety of high-assurance AI based software systems.","tags":null,"title":"Sumon Biswas","type":"authors"},{"authors":["Sumon Biswas","Hridesh Rajan"],"categories":["conference"],"content":" ","date":1684117533,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684117533,"objectID":"69e10835fa1a25e43314c27cd40ef452","permalink":"https://sumonbis.github.io/publication/icse23a/","publishdate":"2022-12-08T20:25:33-05:00","relpermalink":"/publication/icse23a/","section":"publication","summary":"We proposed Fairify, an approach to make individual fairness verification tractable for the developers. The key idea is that many neurons in the NN always remain inactive when a smaller part of the input domain is considered. So, Fairify leverages white-box access to the models in production and then apply formal analysis based pruning.","tags":["fairness","verification","machine learning","neural network"],"title":"Fairify: Fairness Verification of Neural Networks","type":"publication"},{"authors":["Usman Gohar","Sumon Biswas","Hridesh Rajan"],"categories":["conference"],"content":" ","date":1684117233,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684117233,"objectID":"ccc7ccebebd8edb663e866338f22d9cf","permalink":"https://sumonbis.github.io/publication/icse23b/","publishdate":"2022-12-08T20:25:33-05:00","relpermalink":"/publication/icse23b/","section":"publication","summary":"We comprehensively study popular real-world ensembles: bagging, boosting, stacking and voting. We have developed a benchmark of 168 ensemble models collected from Kaggle on four popular fairness datasets. We use existing fairness metrics to understand the composition of fairness. Our results show that ensembles can be designed to be fairer without using mitigation techniques. We also identify the interplay between fairness composition and data characteristics to guide fair ensemble design.","tags":["fairness","ensemble","machine learning"],"title":"Towards Understanding Fairness and its Composition in Ensemble Machine Learning","type":"publication"},{"authors":["Giang Nguyen","Sumon Biswas","Hridesh Rajan"],"categories":["conference"],"content":" ","date":1683512733,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1683512733,"objectID":"06685710a2d0784c29fba5bbcb3dad66","permalink":"https://sumonbis.github.io/publication/esec-fse23/","publishdate":"2023-05-07T21:25:33-05:00","relpermalink":"/publication/esec-fse23/","section":"publication","summary":"Our approach includes two key innovations: a novel optimization function and a fairness-aware search space. By improving the default optimization function of AutoML and incorporating fairness objectives, we are able to mitigate bias with little to no loss of accuracy. Additionally, we propose a fairness-aware search space pruning method for AutoML to reduce computational cost and repair time.","tags":["software fairness","bias mitigation","trade-off","machine learning"],"title":"Fix Fairness, Don't Ruin Accuracy: Performance Aware Fairness Repair using AutoML","type":"publication"},{"authors":null,"categories":["Events"],"content":"I served as an Accessibility Chair in the organizing committee of the SPLASH conference in 2020. SPLASH is the premier conference on the applications of programming languages- at the intersection of programming languages and software engineering. It hosted the OOPSLA, ECOOP, and other co-located events. Because of the pandemic, SPLASH held in 2020 into a virtual setting. I facilitated the audio-video (AV) accessibility support for the authors and audiences. Especially, I enabled closed-captions for all the talks in the conference for their talks for better accessibility. I provided instructions and tutorials to all the authors for creation of closed captions of their talks. Despite several challenges of correction and synchronization, I was able to provide accessibility support to the conference.\nThe success of virtualization of SPLASH 2020 was recognized and appreciated by the organizers, and in the following year I served as the Accessibility Chair in SPLASH 2021 as well. This time SPLASH 2021 was hybrid with close to three hundred in-person participation in Chicago and over four hundred virtual attendees. I observed a great positivity and inclusive culture in the conference which was possible through an easy-to-access medium of operation and technical support. The hybrid conference also showed the benefits of inclusivity in a great deal. It showed that even after pandemic, if we have a hybrid setting in such conferences, a lot more people can join and interact internationally, which is often very limited from many underrepresented country. For example, a student from India could not have traveled to Chicago because of several barriers like visa, travel-cost, etc. However, these people are a big part of the community in terms of publications and representation. The hybrid event gives almost a seamless experience for their participation. Albeit a lot to improve for the hybridization, we wrote a SIGPLAN blog on the hybrid conference organization in 2021.\nMe along with Jonathan Aldrich, Steve Blackburn, Benjamin Chung, Youyou Cong, Alex Potanin, Hridesh Rajan, and Talia Ringer, shared our experience in this SIGPLAN blog.\n","date":1659744000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659744000,"objectID":"d3ce6dd4588d9b53ad4f52cc1c053fa5","permalink":"https://sumonbis.github.io/post/splash/","publishdate":"2022-08-06T00:00:00Z","relpermalink":"/post/splash/","section":"post","summary":"I served in the organizing committee of SPLASH'20 and SPLASH'21. In the former, we arranged a virtual one because of the pandemic. In 2021, we took a step forward to organize a hybrid conference with a large body of participants in-person in Chicago, which taught us important lessons.","tags":["Organization","Conference"],"title":"SPLASH 2021 Retrospective: Organizing a Premier PL Conference in Hybrid","type":"post"},{"authors":["David OBrien","Sumon Biswas","Sayem Imtiaz","Rabe Abdalkareem","Emad Shihab","Hridesh Rajan"],"categories":["conference"],"content":" ","date":1655259933,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655259933,"objectID":"eb57cd870e9202bbc27a07cd49bc0c12","permalink":"https://sumonbis.github.io/publication/esec-fse22/","publishdate":"2022-06-14T21:25:33-05:00","relpermalink":"/publication/esec-fse22/","section":"publication","summary":"We provided a comprehensive taxonomy of machine learning SATDs. Our study analyzes ML SATD type organizations, their frequencies within stages of ML software, the differences between ML SATDs in applications and tools, and the effort of ML SATD removals. The findings discovered suggest implications for ML developers and researchers to create maintainable ML systems.","tags":["machine learning","technical debt","evolution","maintenance"],"title":"23 Shades of Self-Admitted Technical Debt: An Empirical Study on Machine Learning Software","type":"publication"},{"authors":["Sumon Biswas","Mohammad Wardat","Hridesh Rajan"],"categories":["conference"],"content":" ","date":1653186333,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653186333,"objectID":"0164529b937b9d3a151f756e89599ea2","permalink":"https://sumonbis.github.io/publication/icse22/","publishdate":"2021-12-03T21:25:33-05:00","relpermalink":"/publication/icse22/","section":"publication","summary":"This work attempts to inform the terminology and practice for designing data science (DS) pipeline. Our investigation suggest that DS pipeline is a well used software architecture but often built in ad hoc manner. We demonstrated the importance of standardization and analysis framework for DS pipeline following the traditional software engineering research on software architecture and design patterns. We also contributed three representations of DS pipelines that capture the essence of our subjects in theory, in-the-small, and in-the-large that would facilitate building new DS systems.","tags":["data science pipelines","data science processes","descriptive","predictive"],"title":"The Art and Practice of Data Science Pipelines: A Comprehensive Study of Data Science Pipelines In Theory, In-The-Small, and In-The-Large","type":"publication"},{"authors":null,"categories":null,"content":"Data science processes are becoming an integral component of many software systems today. In data-driven software, the processes are organized in several stages such as data acquisition, data preprocessing, modeling, training, evaluation, prediction, and so on, where the data flow from one stage to another. The stages with different subtasks, their connections, and feedback loops, create a new kind of software architecture called Data Science Pipeline. In order to design and build software systems with data science stages effectively, we must understand the structure of the data science pipelines. We demonstrated the importance of standardization and analysis framework for data science pipelines. We took the first step to understand the architecture and patterns of data science pipelines from theory and practice. We conducted a three-pronged study to draw observations from pipelines in the literature and popular press, smaller data science tasks, and large projects. They investigated the representation of the pipeline structure, its organization, and characteristics. What are the typical stages of a data science pipeline? How are they connected? Do the pipelines differ in the theoretical representations and that in the practice? Today we do not fully understand these architectural characteristics. The study resulted in three representative pipeline structures. The work also informs the terminology and design criteria for pipelines. For example, a number of stages from theory are absent in the pipelines in small data science programs without a clear separation of stages. On the other hand, the pipelines in large data science projects develop complex pipelines with feedback loops and sub-pipelines. The stage boundaries are stricter in large projects, which is necessary for scalability, maintenance, and testing of pipelines. The results will facilitate pipeline architects, practitioners, and software engineering teams to compare with existing and representative pipelines. For instance, a data scientist can identify whether the pipeline is missing any important stage or feedback loops in an earlier stage of development lifecycle, which will save much time and effort.\nWe presented the results of the paper entitled \u0026ldquo;The Art and Practice of Data Science Pipelines: A Comprehensive Study of Data Science Pipelines In Theory, In-The-Small, and In-The-Large\u0026rdquo;, in the research technical track of the 44th International Conference on Software Engineering (ICSE 2022) held in Pittsburgh, PA, USA from May 21-29, 2022.\nThe project has been supported in part by the National Science Foundation TRIPODS institute at ISU called D4 (Dependable Data-Driven Discovery). D4 has a broader goal of increasing dependability in data science pipelines by addressing various critical properties of pipelines such as fairness, complexity, uncertainty, and so on. The preprint of the paper is now available. Also, the artifact containing data and code are evaluated and published for future work in the area.\n","date":1639785600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1639785600,"objectID":"9ac42040f2d99965bdb2605ba741bc88","permalink":"https://sumonbis.github.io/project/design-architecture-ds/","publishdate":"2021-12-18T00:00:00Z","relpermalink":"/project/design-architecture-ds/","section":"project","summary":"We study, design, and analyze the DS pipeline architecture consisting stages such as preprocessing, modeling, training, evaluation, etc.","tags":["SE4ML","Design"],"title":"Design and Architecture of Data Science Pipelines","type":"project"},{"authors":null,"categories":null,"content":"Software fairness has been violated in many critical predictive applications in recent times. We have seen a number of those news in last few yers. The machine learning (ML) models used to make the predictions can exhibit bias for various reasons. In this project, we address the algorithmic fairness of the models, which is measured from the predictions of the model.\nReported fairness violations Many research looked at the problem and proposed different measures and mitigations to make the models fairer. However, the prior works consider the ML model wholistically as a black-box, and do not look at the fairness of components in the ML pipeline. ML pipeline can have several components and stages such as preprocessing, training, tuning, evaluation, etc. Each of them can affect the ultimate fairness of the model. Our goal is to investigate the fairness in the component-level and identify the modules that are causing the unfairness.\nReported fairness violations First, we do not consider the whole ML model as a single black box. Along with commenting on the fair of unfair behavior of the whole model, we look inside the black box and try to understand which components are responsible for the unfairness of the model. Our FSE'21 paper paper focused on identifying unfair preprocessing stages in ML pipeline.\nWhat is the fairness measure of a certain component/stage (e.g., imputation, scaling, etc.) in ML pipeline? Look at the following ML pipeline which is taken from the crime prediction analysis repository of Propublica. The pipeline operates on Compas dataset that contains records of about 7k defendants in Florida. This was used at US courts in at least 10 states including New York, Wisconsin, California, Florida, etc 1. The pipeline transforms data using six data transformers before applying the LogisticRegression model. For example, in line 2-5, custom data filtration was applied, and in line 12, an imputation method from the library was applied to replace the missing values for the feature is_recid. When we measure the fairness of this model using existing metrics such as statistical parity or equal opportunity, that does not say anything about the fairness of these data transformers.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 df = pd.read_csv(f_path) df = df[(df.days_b_screening_arrest \u0026lt;= 30) \u0026amp; (df.days_b_screening_arrest \u0026gt;= -30) \u0026amp; (df.is_recid != -1) \u0026amp; (df.c_charge_degree != \u0026#39;O\u0026#39;) \u0026amp; (df.score_text != \u0026#39;N/A\u0026#39;)] df = df.replace(\u0026#39;Medium\u0026#39;, \u0026#39;Low\u0026#39;) labels = LabelEncoder().fit_transform(df.score_text) impute1_onehot = Pipeline([ (\u0026#39;imputer1\u0026#39;, SimpleImputer(strategy=\u0026#39;most_frequent\u0026#39;)), (\u0026#39;onehot\u0026#39;, OneHotEncoder(handle_unknown=\u0026#39;ignore\u0026#39;))]) impute2_bin = Pipeline([ (\u0026#39;imputer2\u0026#39;, SimpleImputer(strategy=\u0026#39;mean\u0026#39;)), (\u0026#39;discretizer\u0026#39;, KBinsDiscretizer(n_bins=4, encode=\u0026#39;ordinal\u0026#39;, strategy=\u0026#39;uniform\u0026#39;))]) featurizer = ColumnTransformer(transformers=[ (\u0026#39;impute1_onehot\u0026#39;, impute1_onehot, [\u0026#39;is_recid\u0026#39;]), (\u0026#39;impute2_bin\u0026#39;, impute2_bin, [\u0026#39;age\u0026#39;])]) pipeline = Pipeline([(\u0026#39;features\u0026#39;, featurizer), (\u0026#39;classifier\u0026#39;, LogisticRegression())]) We used causal reasoning in software to identify the fairness impact of those stages in the prediction.\nCausality in Software Identifying causal effects has been an integral part of scientific inquiry. It helped to answer a wide range of questions like - understanding behavior in online systems, or effect of social policies, or risk factors for diseases and so on.\nIn causal testing, given a failing test, causal experiments are conducted to find a set of test-passing inputs that are close to the failing input. In this project, we also used this casual modeling on the pipeline. We intervene on one variable of interest at a time and observe the change in the outcome.\nFor two random variables $X$ and $Y$, we say that $X$ causes $Y$ when there exist at least two different interventions on $X$ that result in two different probability distributions of $Y$. Causality in Fairness Causality in fairness has also been studied in the literature. “Other things being equal”, prediction would not have changed in the counterfactual world, where only the intervened variable would have changed.\nA predictor $\\hat{Y}$ is said to satisfy causal fairness if\n$$ P(\\hat{Y}(a, U) = y | X = x, A = a) = P(\\hat{Y}(a\u0026rsquo;, U) = y | X = x, A = a) $$\nWe create an alternative pipeline $\\mathcal{P}* $ from the given pipeline $\\mathcal{P} $ by removing the preprocessing stage in consideration. Then we look at the prediction disparity between $\\mathcal{P} $ and $\\mathcal{P}* $. The disparity can be fairness satisfying or not. To evaluate that, we used the existing fairness criteria from the literature.\nThus, we proposed four novel metrics to measure fairness of a stage in the ML pipeline. We observed a number of patterns of fairness of the the data transformers that are commonly used in pipelines.\nData filtering and missing value removal change the data distribution and hence introduce bias in ML pipeline.\nNew feature generation or feature transformation can have large impact on fairness.\nEncoding techniques should be chosen cautiosly based on the classifier.\nSimilar to the tradeoff between the accuracy and fairness for the classifier, the stages of the pipelines also exhibit the tradeoff. Often the accuracy-improve data transformer is unfair.\nAmong all the transformers, applying sampling technique exhibits most unfairness.\nSelecting a subset of features often increase unfairness.\nFeature standardization and non-linear transformers are fair transformers.\nFurthermore, another impact that our method could attain is that we can instrument the pipeline. A pipeline can have a unfair stage that favors the privileged. Similarly, there can be another stage that favors the unprivileged. Both stages can be used in a pipeline such that their unfairness is canceled.\nThe fairness composition can help to choose appropriate alternatives while development and improve the overall fairness. We noticed that the most popular fairness packages (e.g., AIF360) uses a default data preprocessing each time users import datasets from the packages. There is no option to control or measure the unfair stages in the pipeline. Our early results would provide guidance to analyze fairness at a component-level. Further research in the area is in progress to understand fairness composition and optimize the pipeline construction.\nhttps://www.propublica.org/article/machine-bias-risk-assessments-in-criminal-sentencing.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":1622160000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1622160000,"objectID":"534bc5f72e3d9085729e1f3b1f923837","permalink":"https://sumonbis.github.io/project/modular-fairness/","publishdate":"2021-05-28T00:00:00Z","relpermalink":"/project/modular-fairness/","section":"project","summary":"We used causal reasoning to measure fairness of components and remove them from machine learning pipeline.","tags":["Fairness"],"title":"Causal Fairness in Machine Learning Pipeline","type":"project"},{"authors":["Sumon Biswas","Hridesh Rajan"],"categories":["conference"],"content":" ","date":1621563933,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621563933,"objectID":"75a3bd006e2342f9c8ff200f1fce4304","permalink":"https://sumonbis.github.io/publication/esec-fse21/","publishdate":"2021-06-05T21:25:33-05:00","relpermalink":"/publication/esec-fse21/","section":"publication","summary":"We introduced the causal method of fairness to reason about the fairness impact of data preprocessing stages in ML pipeline. We leveraged existing metrics to define the fairness measures of the stages. Then we conducted a detailed fairness evaluation of the preprocessing stages in 37 pipelines collected from three different sources.","tags":["fairness","machine learning","preprocessing","pipeline","models"],"title":"Fair Preprocessing: Towards Understanding Compositional Fairness of Data Transformers in Machine Learning Pipeline","type":"publication"},{"authors":null,"categories":["Research"],"content":"The government, academia, industry are increasingly employing artificial intelligence (AI) systems in decision making. With the availability of numerous data, AI systems are becoming more popular in various sectors. Many of these systems affect human lives directly in one way or another. Our research highlighted that many of such real-world machine learning (ML) models exhibit unfairness with respect to certain societal groups of race, sex or age. In the last few years, our software design lab employed significant effort to identify fairness in machine learning algorithms and mitigate that effectively. Recent result shows that several components in an ML pipeline are influencing the predictive result that is unfair to minority groups such as dark-skinned people or female.\nI and my advisor Hridesh Rajan are working in the D4 Institute at Iowa State which broadly focuses on increasing the dependability of AI-based systems.\nThe accuracy of a model is not always telling the whole story. How much bias the model propagates or how much we can trust the prediction is a big question.\nThese AI-based software are being used in hiring employees, approving loans, criminal sentencing, which should be more accountable and explainable. Analyzing the behavior of ML pipeline in component level would help towards that goal. Our paper proposing a novel method to identify unfairness of ML components has been recently accepted in ESEC/FSE 2021, which is one of top software engineering conference and internationally renowned forum for researchers, practitioners, and educators.\nIn the paper, we proposed a causal method to measure the fairness of different stages in ML pipeline.\nAlthough some recent work proposed metrics to quantify the bias in the predictions, ML software is complex having several stages. Our method could effectively identify the data transformers that caused unfairness in such software.\nWe strongly believe that the researchers and practitioners would be able to leverage our approach to avoid biased data preprocessing. Our goal in the long-run would be to unveil the ML black box and reason about fairness constraints.\nI will present the results of the paper entitled “Fair Preprocessing: Towards Understanding Compositional Fairness of Data Transformers in Machine Learning Pipeline”, in the research track of the 29th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE) to be held in Athens, Greece from August 23-28, 2021. The preprint of the paper is available here: https://arxiv.org/pdf/2106.06054.pdf.\nWe are excited on the acceptance of the paper in a top venue in our area. We are continuing the research to explore new avenues and assure the fairness of machine learning software.\n","date":1619913600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619913600,"objectID":"1ab4ba38aa03ed52dfdbc98a7c808bd7","permalink":"https://sumonbis.github.io/post/fair-pipeline/","publishdate":"2021-05-02T00:00:00Z","relpermalink":"/post/fair-pipeline/","section":"post","summary":"We proposed causal reasoning in machine learning pipeline to measure fairness of data preprocessing stages.","tags":["Fairness","Causal reasoning","Machine learning"],"title":"Our Research Identifies Unfairness in the Component Level of AI Based Software","type":"post"},{"authors":["Sumon Biswas","Hridesh Rajan"],"categories":["conference"],"content":" ","date":1604888733,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604888733,"objectID":"043ad64d98f6c6350150e48aa5466b16","permalink":"https://sumonbis.github.io/publication/esec-fse20/","publishdate":"2020-06-20T21:25:33-05:00","relpermalink":"/publication/esec-fse20/","section":"publication","summary":"We have focused on the empirical evaluation of fairness and mitigations on real-world machine learning models. We have created a benchmark of 40 top-rated models from Kaggle used for 5 different tasks, and then using a comprehensive set of fairness metrics, evaluated their fairness. Then, we have applied 7 mitigation techniques on these models and analyzed the fairness, mitigation results, and impacts on performance.","tags":["fairness","machine learning","models"],"title":"Do the Machine Learning Models on a Crowd Sourced Platform Exhibit Bias? An Empirical Study on Model Fairness","type":"publication"},{"authors":null,"categories":["Tutorial"],"content":"YouTube Studio can be used to generate closed captions for your talk by following these simple steps:\nFirst, record the video of the talk. The video should have a clear voice recording.\nSign in to YouTube Studio.\nClick on CREATE \u0026gt; Upload videos. Then upload the recorded talk and fill the standard options (title, description, etc.). Finish the upload and publish it. It will take some time to upload and process the video.\nTo be able to auto-generate the captions, select the Video language (e.g., English), and Caption certification (e.g., This content has never aired on television in the U.S.). Steps for generating captions in YouTube Studio After the video is published, select Videos from the left menu and click on the video. It will open the video editing options. Video editing options Click Subtitles from the left menu. You should see English(Automatic) subtitle option there. Click DUPLICATE AND EDIT. This option might not be available immediately after uploading a video. For me, YouTube Studio took around half an hour to make the subtitle available for a 15-min video. Generate subtitles You should see the automatically generated text from the speech. You have two options to finalize the captions: You can edit the text to make corrections: adding punctuations, capitalization, misspelled words, etc. The text will be automatically synced with the timing. However, you can modify the timings too. Note that, in one timeframe, you should not put a lot of characters which will cover much space on the screen. Alternatively, you can delete the automatically generated text and add your text manually by clicking on +CAPTION. Then write the text, start time, and end time. Edit subtitles Save the draft and click PUBLISH.\nFinally, click on Options beside the EDIT button and click Download. Then select .srt format. Thus, you get your closed caption for your talk in a .srt file.\nThe .srt file is editable with a text editor as well. Be careful with the formatting and finally check whether the captions are working on a video player on your computer. Here is an example talk with closed captions. Click on the CC button on the video if the closed captions are not enabled on YouTube. You can get other details about YouTube Studio captioning here.\nOther Options Apart from YouTube Studio, there are other tools too for generating captions (.srt).\nMaestra is an online service to generate and export subtitles. You can sign in, upload your video talk, transcribe, edit the auto-generated subtitles, and then export .srt.\nOtter.ai can be used to do the task. You can find the instructions here. Although its a paid service, there could be some free trials.\nRev is another paid service to generate captions manually by human experts.\nOther tools can be also used. Depending on the backend transcribe engine, the correctness can vary. However, you should edit the auto-generated text to finalize the closed captions.\n","date":1602547200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605225600,"objectID":"577a1b5e81872c2d5d845fe5f2d00d71","permalink":"https://sumonbis.github.io/post/closed-captions/","publishdate":"2020-10-13T00:00:00Z","relpermalink":"/post/closed-captions/","section":"post","summary":"This tutorial shows how to generate closed captions for your talk using YouTube Studio. This will come handy for accessability purpose for recording talks. These easy steps generate transcript automatically which is also editable.","tags":["Talk","Closed-captions"],"title":"How to Add Closed Captions in Your Video Talk","type":"post"},{"authors":null,"categories":["Research"],"content":"D4 Institute is an interdisciplinary data science hub at Iowa State university where professors, graduate students, REU students, and researchers from Computer Science, Electrical Engineering, Mathematics, Statistics collaborate to ensure the dependability of data science.\nD4 institute took about four year to assemble and then funded by NSF TRIPOD grant in 2020. My advisor Hridesh Rajan leads the project as an PI. I have been involved with D4 from the beginning of writing the NSF proposal. Afterwards, I continue to contribute as a graduate researcher in the project.\nThe computer science magazine Atanasoff Today featured out work in the D4 Institute. The magazine is available in here: https://www.cs.iastate.edu/atanasoff-today-piecing-together-premier-data-science-research-hub\nSumon Biswas (’21 computer science, Ph.D.) was immediately drawn to Iowa State’s computer science program, in part because of Rajan’s group. Research opportunities related to the data science field matched nicely with his career goals. Biswas was particularly drawn to the group’s commitment to researching the data science pipeline.\nThe central goal of the project is to ensure the dependability of data-driven software. With the growing interests in AI and machine learning, we need to focus on the safety, security, fairness, robustness, and more critical properties of such systems.\n“My research interests are very specific and tailored. My career focus blends software engineering, programming languages and data science,” Biswas said. “The varied research opportunities at Iowa State, in particular with the D4 Institute, allowed me to become an entrepreneur of sorts and design my own career that fit with my goals.”\nMy advisor guided through the process to delve into the area and make original contribution in the project. We are continuing to work in the area and blend the software engineering and programming language expertise to bring more reliability on the AI and ML based systems.\nRajan has provided Biswas with a rich array of opportunities that have shaped his career path. In addition to engaging in cutting-edge research on the data science life cycle, Biswas provided significant contributions to the development of the successful TRIPODS NSF grant. He also attended the Midwest Big Data Summer School where he learned cutting-edge research methods that further drew him into studying the data science life cycle.\nSpecifically, I looked deep into the data science pipeline, which is a ordered set of stages including data collection, exploratory analysis, data preprocessing, modeling, training, evaluation, and different properties of the pipeline.\n“It’s been incredible,” Biswas said. “I’ve learned novel research ideas from D4 researchers and practitioners who have introduced me to studying the data science pipeline and its properties.”\nI already published my research work on ensuring fairness of machine learning models. The work analyzes different fairness measures, mitigation techniques, and their impacts in real-world ML based software.\nBiswas is close to publishing his own research which he conducted at the D4 Institute. “It’s exciting to be involved in research that could improve software systems, which affect many people who are impacted by data-driven decisions,” he said.\nRajan and his team plan to hire additional undergraduates, graduate students and postdocs at the D4 Institute. More students, like Biswas, will benefit from the experience of conducting NSF-funded research and working with seasoned experts who collaborate on studies.\nWe have a full-grown team of collaborators now, undergraduate and graduate students, postdocs, industry partners, and professors from different expertise. I have also mentored undergraduate students and collaborated with others, which was a great experience to gain further knowledge, and share thoughts and ideas.\n","date":1597449600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600387200,"objectID":"74442bf515b9a9a635ce128d77164161","permalink":"https://sumonbis.github.io/post/d4-institute/","publishdate":"2020-08-15T00:00:00Z","relpermalink":"/post/d4-institute/","section":"post","summary":"D4 Institute is an interdisciplinary data science hub at Iowa State university where professors, graduate students, REU students, and researchers from Computer Science, Electrical Engineering, Mathematics, Statistics collaborate to ensure the dependability of data science.","tags":["Data science","Machine learning","Interdisciplinary"],"title":"Being a Part of A Premier Data Science Research Hub","type":"post"},{"authors":null,"categories":null,"content":"Software engineering (SE) research has focused on identifying, localizing, and repairing defects in software systems. With the evolution of programming languages, coding practices and requirements, various kinds of bugs of software has drawn interest. Recent trend of machine learning techniques has raised the question of dependability of the predictive decisions. Fairness of the machine learning (ML) models has been an open issue for such software systems in last few years. In critical decision making such as loan approval, crime prediction, college admission or hiring employees, ML algorithms are being used. However, the problem of fairness has not been studied by the SE community as much as the ML community looked into it. We conducted an empirical study in our FSE'20 paper to investigate a number of SE concerns of measures, mitigation, and impact of unfairness in ML models.\nIt is important to ensure the fairness of the ML models so that no discrimination is made based on protected attribute (e.g., race, sex, age) while decision making.\nFirst, it is important to look at the real-world software systems to understand the state of unfairness. Most of the study experiment using default-set classifiers from libraries. Thus, often the real faults and concerns with fairness are missed. However, it might be difficult to find such open-source models in the wild. We found a good number of models from Kaggle that helped to point down fairness issues in the wild.\nFairness Measures The foremost big concern is that how do we know there is a fairness issue in my model. Well, it depends on the stakeholder and the context. The participants could ask for equal opportunity, while the owners focus on the disparate impact. A popular library for fairness, AIF360 has more than 70 metrics to measure fairness. Two most common used broad categories of fairness measures are:\nGroup fairness Individual fairness The impossibility theorem of fairness suggests that satisfying fairness with respect to all the definition can not be achievable, since one definition can contradict another. Furthermore, fairness in classification problem has been focused is most of the works, while fairness of regression or ranking problems is not yet well studied.\nChoosing appropriate fairness metrics and optimizing them simultaneously is an important requirement engineering problem to be solved. We found several interesting finding from our experiments:\nOnly one fairness metric would not show the whole picture. There is no metric that combines multiples metric too.\nFairness metrics have their assumptions as well. Most of the group fairness metrics require the dataset divided into privileged and non-privileged. So, it can not compute unfairness among multiple groups (e.g., Asian, American, African, etc.) at the same time. Furthermore, the metrics measure fairness with respect to one protected attribute (race or sex or age). A fair model with respect to sex could be biased with respect to age.\nDevelopers often tend to optimize the models for accuracy, which causes unfairness.\nThe library APIs such as classifiers from Scikit-Learn have several constructs that affect fairness. But those are not document and developers are aware of their fairness impacts.\nIt is often thought that if data is fair, the model would be so too. Although data has a great deal of impact of fairness of the decisions, a model could be fairer which used biased data. At the same time, a model could be biased which was trained on unbiased data. We found that some data preparation techniques, thus, can have both positive or negative impact on fairness. Specifically, the data standardization and feature engineering (removal or creation) techniques affect fairness almost always.\nBias Mitigation There are many bias mitigation techniques proposed in the literature, which are grouped into these categories:\nPreprocessing techniques: These techniques operate on the training data to make the resulting model fairer. In-processing techniques: These techniques alters the existing mode. Post-processing techniques: The predictions are changes with some constraints to make them fairer. Choosing a bias mitigation technique can be also confusing. Applying one mitigation technique can work for a particular metric and hamper accuracy as well as another fairness metric. In our paper, we reported several observations that help to choose a mitigation technique for the model.\nEffective preprocessing mitigation technique is preferable, since it does not ruin accuracy in most of the cases.\nIf the model exhibits a lot of bias, post-processing techniques are the most successful.\nOriginally fairer models are debiased effectively by preprocessing or in-processing techniques.\nImpacts Fairnes does not come free. In most of models, there is a accuracy loss when the mitigation technique are applied. Multi-objective optimization could be utilized to improve fairness and accuracy together.\nIn-processing mitigation algorithms show uncertain behavior in their performance.\nAlthough post-processing algorithms are the most dominating in debiasing, they are always diminishing the model accuracy and F1 score.\nTrade-off between performance and fairness exists.\nOverall, ensuring fairness require to address many dimensions of the problem at the same time. There is a wrong perception that only debiasing training data would suffice to make the model fair. The training is not always uniform and it does not learn from all the data instances equally. So, its needed to make the learning process better as well. Because of the tradeoff, multiple metrics, domain-specific issues, we need further testing and verification mechanisms as well. A few studies proposed fairness aware language constructs and test input generation techniques. However, we need further languages, tools, and methods to localize the fairness issue and repair them in real-world situations.\n","date":1589846400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589846400,"objectID":"4fe69a435339d8181a0f74598e2d38b6","permalink":"https://sumonbis.github.io/project/empirical-fairness/","publishdate":"2020-05-19T00:00:00Z","relpermalink":"/project/empirical-fairness/","section":"project","summary":"We have studied the software engineering concerns of fairness in real-world machine learning models.","tags":["Fairness"],"title":"Fairness Engineering in ML Models","type":"project"},{"authors":null,"categories":null,"content":"Data science (DS) is everywhere now. The chart below shows the increasing number of publications with the topic “machine-learning” in the title. Also, the number of open source data science repositories in GitHub is growing very rapidly. Mining Software Repository have been very successful in recent times for SE research. Some datasets like Dacapo, Quallitas created new opportunity for MSR research. However, there is no dataset available to analyze DS software written in Python language. So, we created this dataset by mining open-source repositories from GitHub. The dataset was published in MSR 2019.\nMined data from GitHub DS repositories We created a dataset that contains top rated 1,558 DS projects from Github that are written in Python. For storing and analyzing efficiently, we have stored the dataset in Hadoop sequence file. The dataset is available in Boa platform. The details about the parsing, mining, and usage can be found here. Dataset Details Different metrics of the dataset in showed in the table at the top. We used several filtering criteria to select top-rated data DS repositories. The properties of the dataset are:\nFiltering criteria to select GitHub repos. Original (not forked) project with Python as the primary language. Contains at least one data science keywords like machine-learning, deep neural network in the description of the project. The whole list of keywords are as follows: \u0026quot;machine learn\u0026quot;, \u0026quot;machine-learn\u0026quot;, \u0026quot;data sci\u0026quot;, \u0026quot;data-sci\u0026quot;, \u0026quot;big data\u0026quot;, \u0026quot;big-data\u0026quot;, \u0026quot;large data\u0026quot;, \u0026quot;large-data\u0026quot;, \u0026quot;data analy\u0026quot;, \u0026quot;data-analy\u0026quot;, \u0026quot;deep learn\u0026quot;, \u0026quot;deep-learn\u0026quot;, \u0026quot;data model\u0026quot;, \u0026quot;data-model\u0026quot;, \u0026quot;artificial intel\u0026quot;, \u0026quot;artificial-intel\u0026quot;, \u0026quot;mining\u0026quot;, \u0026quot;topic modelling\u0026quot;, \u0026quot;topic-modelling\u0026quot;, \u0026quot;natural language pro\u0026quot;, \u0026quot;natural-language-pro\u0026quot;, \u0026quot;nlp\u0026quot;, \u0026quot;data frame\u0026quot;, \u0026quot;data proces\u0026quot;, \u0026quot; ml \u0026quot;, \u0026quot;tensorflow\u0026quot;, \u0026quot;tensor flow\u0026quot;, \u0026quot;tensor-flow\u0026quot;, \u0026quot;theano\u0026quot;, \u0026quot;caffe\u0026quot;, \u0026quot;keras\u0026quot;, \u0026quot;scikit-learn\u0026quot;, \u0026quot;kaggle\u0026quot;, \u0026quot;spark\u0026quot;, \u0026quot;hadoop\u0026quot;, \u0026quot;mapreduce\u0026quot;, \u0026quot;hdfs\u0026quot;, \u0026quot;neural net\u0026quot;, \u0026quot;neural-net\u0026quot; Contains at least one usage of data science library like Pytorch, Caffe, Keras, Tensorflow, etc. A full list of used 33 Python data science libraries are listed below: \u0026quot;theano\u0026quot;, \u0026quot;pytroch\u0026quot;, \u0026quot;caffe\u0026quot;, \u0026quot;keras\u0026quot;, \u0026quot;tensorflow\u0026quot;, \u0026quot;sklearn\u0026quot;, \u0026quot;numpy\u0026quot;, \u0026quot;scipy\u0026quot;, \u0026quot;pandas\u0026quot;, \u0026quot;statsmodels\u0026quot;, \u0026quot;matplotlib\u0026quot;, \u0026quot;seaborn\u0026quot;, \u0026quot;plotly\u0026quot;, \u0026quot;bokeh\u0026quot;, \u0026quot;pydot\u0026quot;, \u0026quot;xgboost\u0026quot;, \u0026quot;catboost\u0026quot;, \u0026quot;lightgbm\u0026quot;, \u0026quot;eli5\u0026quot;, \u0026quot;elephas\u0026quot;, \u0026quot;spark\u0026quot;, \u0026quot;nltk\u0026quot;, \u0026quot;cntk\u0026quot;, \u0026quot;scrapy\u0026quot;, \u0026quot;gensim\u0026quot;, \u0026quot;pybrain\u0026quot;, \u0026quot;lightning\u0026quot;, \u0026quot;spacy\u0026quot;, \u0026quot;pylearn2\u0026quot;, \u0026quot;nupic\u0026quot;, \u0026quot;pattern\u0026quot;, \u0026quot;imblearn\u0026quot;, \u0026quot;pyenv\u0026quot; Each repository contains at least 80 star. The dataset contains projects owned by both organizations and individual users. Some of the top rated projects are Tensorflow Models, Keras, Scikit-learn, Pandas, Spacy, Spotify Luigi, NVIDIA FastPhotoStyle, Theano, etc.\nA full list of all the 1,558 Github projects are available here. 350 projects in the dataset are maintained by different organizations (Google, Microsoft, NVIDIA etc.). The list of organizations is here. The rest 1,208 projects are maintained by individual users. The list of users is here. Availability The dataset is available in Boa infrastructure. Go to the Boa web interface and login. If you do not have an account, you can request a user.\nThen click on the Run Examples menu and select 2020 August/Python-DS in the input dataset dropdown option. Finally, you can paste the Boa code and mine desired information.\nThe code, dataset details, and sample Boa queries are shared in this repository. Usage To use the dataset go to Boa website and follow the steps:\nFrom the left menu, select User Login to login as a registered user. If you are not registered, request for a user. Write a query under the Boa Source Code. If researchers are not familiar with the language, the example Boa programs can be utilized by clicking the Select Examples. Some good examples for this dataset can be also found from the Github repository. Select 2020 August/Python-DS dataset in the drop-down list under Input Dataset and run the query. The job will be submitted to Hadoop cluster and is executed parallely on the dataset. When the job status is finished, the output text file will be available for downloading. The job is saved for future reference. One can share the job with others and one can reproduce the result.\nTo learn about Boa language and queries, navigate through the Boa website, especially Programming Guide Section.\nUpdate: We have improved the framework to parse and mine Jupyter Notebooks along with the Python files. ","date":1569110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569110400,"objectID":"34236cd837e0441e0358114120b4d8c8","permalink":"https://sumonbis.github.io/project/github-dataset/","publishdate":"2019-09-22T00:00:00Z","relpermalink":"/project/github-dataset/","section":"project","summary":"This dataset is created by mining 5M Python program snapshots. The code is transformed to AST for static analysis.","tags":["BigCode","SE4ML"],"title":"ML Repo Dataset from GitHub","type":"project"},{"authors":null,"categories":null,"content":"Hyperparameter optimization is a difficult problem in developing deep learning applications. Recently, random search based strategies have been proven efficient for optimizing hyperparameters. However, programmers can not overtly represent uncertainty of the chosen hyperparameter values and accuracy of the model while performing a random search. In this project, we utilize a first order type Uncertain\u0026lt;T\u0026gt; to approximate the distributions of the hyperparameters so that programmers can pick values with certain confidence. This type helps us to represent uncertainty of random hyperparameters and allows us to easily propagate this uncertainty through computations, perform statistical tests on distributions without resorting to complicated statistical concepts, and determine uncertain hyperparameter value in required significance level.\nTo the best of our knowledge, there has not been any attempt to introduce the probabilistic programming concept in DNN hyperparameter optimization. The contributions of this project are as follows. First, we have implemented the first order type Uncertain\u0026lt;T\u0026gt; to hold the distribution of loss values over the randomly chosen hyperparameters. The main goal is to help programmers overtly represent uncertainty in chosen hyperparameters and make conditional statements using that. By using this type, we define algebra over random variables so that the uncertainty of the hyperparameters can propagate through the calculations and provide convergence speed and increase in accuracy. Second, our method performs significantly better than the random search method which is used by most of the DNN libraries. Our result shows that while 62% of the random search trials fall below the accuracy threshold, only 23% time our method fall below the threshold.\nIn this project, our goal is to aid the deep learning programmers to quantify uncertainty in the model hyperparameters and make an informed decision while initializing hyperparameters. A problem with the random search is that it doesn’t take uncertainty of random hyperparameters into account while picking a best value which may adversely impact models when trained on the different distribution of the input domain. To that end, we have leveraged a first order type Uncertain to represent the uncertainty in the random hyperparameters and choose best value by performing statistical tests on the distribution. The main contributions of the project are:\nWe have introduced the probabilistic programming concept in DNN hyperparameter optimization.\nWe have utilized a first order type Uncertain\u0026lt;T\u0026gt; to approximate the distributions over the possible hyperparameter values.\nDescribe the algebra to perform computations over the uncertain hyperparameters.\nProvide syntax to ask boolean question on the uncertain data type to control false positive and false negative.\nImprove the performance of random search for hyperparameter optimization.\n","date":1568160000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568160000,"objectID":"9add6a2e2ac63b9837871c33b4678436","permalink":"https://sumonbis.github.io/academic-project/lambda-calculus/","publishdate":"2019-09-11T00:00:00Z","relpermalink":"/academic-project/lambda-calculus/","section":"academic-project","summary":"We provided aid to the deep learning programmers to quantify uncertainty in the model hyperparameters and help them to make informed decision while initializing hyperparameters. We have leveraged a first order type Uncertain to represent the uncertainty in the random hyperparameters and choose the best value by performing statistical tests on the distribution.","tags":["Uncertainty"],"title":"Quantifying Uncertainty of DNN Hyperparameter Optimization using a First Order Type","type":"academic-project"},{"authors":["Sumon Biswas","Md Johirul Islam","Yijia Huang","Hridesh Rajan"],"categories":["conference"],"content":" ","date":1558923933,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558923933,"objectID":"cc177aef3c74e96982510ef93b0d86c7","permalink":"https://sumonbis.github.io/publication/msr19/","publishdate":"2019-04-20T21:25:33-05:00","relpermalink":"/publication/msr19/","section":"publication","summary":"The popularity of Python programming language has surged in recent years due to its increasing usage in Data Science. The availability of Python repositories in Github presents an opportunity for mining software repository research, e.g., suggesting the best practices in developing Data Science applications, identifying bug-patterns, recommending code enhancements, etc. To enable this research, we have created a new dataset that includes 1,558 mature Github projects that develop Python software for Data Science tasks.","tags":["msr","boa","ast","machine learning","data science","oss","program analysis"],"title":"Boa Meets Python: A Boa Dataset of Data Science Software in Python Language","type":"publication"},{"authors":null,"categories":null,"content":"The usage of data science (DS) techniques have increased immensely in the recent past. With the development of artificial intelligence (AI) and machine learning (ML) algorithms and availability of huge amount of data, there has been a rapid increase of using DS components in software. To enable further software engineering (SE) research of DS software in the wild, we built an infrastructure to mine and analyze DS software in large-scale. Our goal is to:\nLearn from the past and guide future development of DS software Improve software design and reuse Manage DS software better Automatic bug detection and repair Many more \u0026hellip; We think that software engineering research for DS systems is necessary. To that end, we leveraged the huge amount of code and metadata available in open-source GitHub repositories. We proposed a methodology of filtering high-quality DS repositories and then mined code of each revision and project metadata e.g., number of developers, commit logs, creation-date, etc.\nWe used the existing Boa framework to mine from GitHub. Python has been used as a de-facto of ML based software for a long time now. However, Boa could not parse and mine Python code. Therefore, I built the infrastructure to parse the Python code, transform that into AST, and store in Boa\u0026rsquo;s Protobuf format for storing. I used ANTLR grammar for Python 2 and Python 3 for parsing the source. Finally, the dataset is stored in the Hadoop cluster for further analysis. You can learn about how to use the Boa for mining new datasets from this tutorial. The first version of the dataset contained about 5 million Python files (including all revisions) from top rated 1558 DS repositories.\nThe first version of the mined dataset The rich amount of data facilitates analyzing several research questions:\nData science development practices: Due to the recent ‘boom’ in machine learning software development, a lot of questions regearing DS best practices can be asked:\nWhat are the most used data preprocessing library? Why data dimension bugs are more frequent in deep neural networks? What data visualization APIs are most used in last two years? Software change: Since the dataset contains all the snapshots of Python files, how developers change source can be studied.\nProgram analysis: The differences between traditional and DS software development can be studied. For example, do the code complexity or API usages follow similar pattern in DS software?\nSE practices: Several SE research can be conducted on the DS projects in the area of:\nDS bug detection and repair Code comprehension Testing DS modules Project metadata: The project metadata can be leveraged to answer questions such as, what are the coding style differences between projects developed by individuals and organizations, etc.\nFurther details about the dataset can be found here. The domain-specific Boa language helps to perform program analysis query the metadata easily and quickly. For example, the following code snippet quickly count the number of bug-fixing revisions for all the projects in the dataset.\n# Counting the number of bug-fixing revisons for all projects p: Project = input; counts: output sum[string] of int; visit(p, visitor { before n: Project -\u0026gt; ; before node: CodeRepository -\u0026gt; ; before node: Revision -\u0026gt; if (isfixingrevision(node.log)) counts[p.name] \u0026lt;\u0026lt; 1; }); If we want to go deeper and mine the all the method calls in the bug-fixing revisions, we can use the following Boa program.\nExample Boa program for mining method calls in the bug fixing commits. Note that the output contains 74.11 million results. We use commit logs to identify whether it\u0026rsquo;s a bug-fixing revision or not and then visit the expression to get the method calls. Boa uses automatic parallelization to run the query in Haddop cluster. Users do not need to worry about the storage and low-level details.\nAs of this writing, no open source dataset for studying Data Science software is available. We created a infrastructure and dataset to mins DS projects from GitHub that are using Python.\n","date":1555372800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555372800,"objectID":"a1efbc7e1b1ce32f1a863309a9471aef","permalink":"https://sumonbis.github.io/project/mining-ml/","publishdate":"2019-04-16T00:00:00Z","relpermalink":"/project/mining-ml/","section":"project","summary":"Mining and analyzing data-science repositories can provide insights from historical data.","tags":["BigCode","SE4ML"],"title":"Large-Scale Mining of Data-Science Software from GitHub","type":"project"},{"authors":null,"categories":null,"content":"Python is a widely used programming language in education, science and industry. Many distinctive language constructs made Python easy-to-learn and expressive. However, semantics of some advanced features can create corners for the language such as weak scope resolution. The language weaknesses lead to different behaviors from IDEs and create confusions among developers. In this project, our goal is to study two unique language constructs of Python: compound comparison statement and generator. Compound comparison statement is similar to regular if statement but it contains chaining comparison as conditions. Chaining comparison (e.g., x \u0026lt; 10 \u0026lt; x*10 \u0026lt; 100) is a syntactic sugar which combines two comparison operations into one. Generator is another powerful control-flow construct with one or more yield statements which is used for creating user-defined iterators. In this study, we have extended Lambda cal- culus to implement a core language that includes the above two Python language features. We have also described the details of the syntax, operational semantics and type system of the features. In our implementation, we have used Coq proof assistant so that we can further check the correctness of the construct properties.\nFor details refer to the project report.\n","date":1550793600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550793600,"objectID":"4442557436773ca38c0738f0ab5c59d4","permalink":"https://sumonbis.github.io/academic-project/dnn-uncertainty/","publishdate":"2019-02-22T00:00:00Z","relpermalink":"/academic-project/dnn-uncertainty/","section":"academic-project","summary":"I have extended Lambda calculus using Coq proof assistant to implement a core language that includes two Python language features (compound comparison statement and generator function). I have also described the syntax, operational semantics and type system of the features.","tags":["Programming languages"],"title":"Semantics of Compound Comparison Statement and Generator Function in Lambda Calculus","type":"academic-project"},{"authors":null,"categories":["Tutorial"],"content":"This tutorial will describe how to create your own Boa dataset for specific projects in Github and run Boa queries on that dataset locally. We will use command line and Eclipse IDE for that purpose.\nPrerequisite You need to have following already installed in your system:\nJDK Apache Ant Git Eclipse IDE Development Setup Steps Clone the Boa project using the command line: git clone https://github.com/boalang/compiler.git Go to the cloned repository: cd compiler Clean the project: ant clean Create a directory for libraries: mkdir -p build/classes Compile the project: ant compile Create a class folder: mkdir compile In Eclipse go to: File \u0026gt; Open Projects from File System \u0026gt; Import Source – Directory \u0026gt; Browse the cloned repository (compiler) \u0026gt; Hit Finish Import compiler project in Eclipse Right click on the project compiler \u0026gt; Build Path \u0026gt; Configure Build Path In Source tab, click Add Folder to add the required source folders and remove unnecessary folder(s). After adding all the folders, the window should look like the following: After configuring Eclipse Select Libraries tab in the same window and click on Add Class Folder and add the compiler/compile folder that has been created in step 6. Click Add JARs… in the same Libraries tab \u0026gt; select lib \u0026gt; select all the files inside lib, including files under datagen and evaluator folder \u0026gt; hit Apply and Close. From the compiler project in Eclipse, right click on build.xml \u0026gt; Run as \u0026gt; 1 Ant build. This should build the project successfully. The development setup is completed. Now, we will move on to data generation steps. Boa Data Generation Steps Go to github.com and search the project for which you want to create the dataset. For example, if you want to create dataset for Apache Mavan project, go to https://github.com/apache/maven . Invoke a GitHub http-based RESTful API to get the metadata of the project by constructing a URL https://api.github.com/repos/repo_full_name, for example https://api.github.com/repos/apache/maven. Copy the whole JSON metadata, create a blank text file, type a pair of brackets ‘[]’, paste the metadata inside the brackets. Search for \u0026ldquo;languages_url\u0026rdquo; field in the JSON data, go to the URL, copy everything, create another field in the JSON file (\u0026ldquo;language_list\u0026rdquo;: ), paste copied text and save the file as filename.json (e.g., maven.json). The last few lines of the JSON file should look like: JSON file In this way, for each project, that will be included in the dataset, create a JSON file. So, if you want to create a dataset for 5 projects, you will create 5 separate JSON files. Save all the JSON files in a folder. Alternatively, you can create a single JSON file for all of the projects by separating them by comma in an array ‘[]’. The format looks like [{}, {}]. Each curly brace is for one project. In Eclipse, go to the project compiler \u0026gt; src/java \u0026gt; boa.datagen, right click on BoaGenerator.java \u0026gt; Run As \u0026gt; Run Configurations. Double click on Java Application to create a new configuration. Browse project and select compiler, Search Main Class and select boa.datagen.BoaGenerator. Data generator configuration Select Arguments tab and add program arguments. The program arguments format should look like: -inputJson \u0026lt;directory containing project JSON files\u0026gt; -output \u0026lt;output directory of the dataset (folder will be automatically created)\u0026gt; -inputRepo \u0026lt;temporary directory used to clone the projects (this folder will be automatically created)\u0026gt; The other arguments are optional. For example, to print debug messages in console use -debug.\nData generator parameters Hit Run. This should start cloning the projects form Github and generating dataset. Depending on the number of projects and size of the projects, this will take some time to finish. When the red Terminate option in the console goes off, the data generation process is finished. Run Boa Query on New Dataset Create a dataset folder copying three files (projects.seq, ast/data, ast/index) from the generated output folder from step 8 of data generation process. In Eclipse, go to the project compiler \u0026gt; src/java \u0026gt; boa.evaluator, right click on BoaEvaluator.java \u0026gt; Run As \u0026gt; Run Configurations… Create a new configuration by clicking the New Configuration in the upper left corner of the window. Give a Name to the configuration, Browse project and select compiler, Search Main Class and select boa.evaluator.BoaEvaluator. Select Arguments tab and add program arguments. The program arguments format should look like: -input \u0026lt;file path to the boa source code file\u0026gt; -data \u0026lt;dataset directory containing three files(projects.seq, data, index)\u0026gt; -output \u0026lt;output directory\u0026gt; Data evaluator parameters The output of the query will be printed in the console. The screencast to go over the above steps and setup Boa development environment is shown in the following video.\n","date":1531440000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558828800,"objectID":"874fc4ed6a8e6a441982bc12c4d7ab26","permalink":"https://sumonbis.github.io/post/boa-tutorial/","publishdate":"2018-07-13T00:00:00Z","relpermalink":"/post/boa-tutorial/","section":"post","summary":"This tutorial demonstrates how to setup Boa on local machine and generate new GitHub dataset. It includes a screencast to go over the steps.","tags":["MSR","Static Analysis","Mining"],"title":"Boa for Big-Code Mining and Large-Scale Static Analysis","type":"post"},{"authors":null,"categories":null,"content":"As part of the K-12 Outreach program, ISU computer science organized Computational Thinking Event this year. I got the opportunity to be a judge of the competition and see the outstanding computational projects developed by bright youngsters!\nScience fair-like format where participants come prepared to present their projects to a panel of experts.\nComputational thinking is critical skill that is needed for the success in the 21st century. The exposure to problem solving skills at an early stage helps the students greatly in their future endeavor. Since Fall 2010, the ISU Computer Science Department has been making efforts in Iowa K-12 schools with a series of events and workshops designed to help K-12 educators, parents, and students learn about computational thinking.\nTrophies, Prizes, Awards of Excellence, and Certificates of Participation. Prizes included laptops, tablets and Raspberry PIs.\nThis particular event was last Saturday at Iowa State campus. The computer science faculties who were involved in the outreach program are: Wallapak Tavanapong, Soma Chaudhuri, Yan-Bin Jia, Lu Ruan, Simanta Mitra, and Oliver Eulenstein.\nI joined the panel of judges along with other graduate students. I was really amazed to see how interesting and skillful projects were developed by the young students. The students competed in the following groups:\nK 3 K 4-6 K 7-9 K 10-12 Contestants could work in small groups of two or by themselves. The judgements were mainly based on the difficulty of the problem, cleverness of the solution, and ability of the students to explain.\nMost of the younger students were using the Scratch platform developed in MIT, to learn and build interesting games. Scratch is designed and maintained by the Lifelong Kindergarten group at the MIT Media Lab. Here is an example project Speech Helper 2.0 built by Carson and McClain Crigger, both sixth graders at South Middle School in Waukee, IA. The program is designed to help their younger brother practice letter sounds.\nScratch is a programming language and an online community where children can program and share interactive media such as stories, games, and animation with people from all over the world.\nIt was fascinating to see the coding skill of the kids and how they are engaged in the activity. There were three projects in the K 10-12 group which were solving complex problem with exciting ideas:\nProject Mardiop by Adam Project Electric Field Simulation by Brandt Project Fast Intersection by Prithvi Those projects were rich in formulating the problem, organizing and analyzing data, and testing and managing their code. It was a great day to talk to them and share ideas.\n","date":1523664000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1523750400,"objectID":"2c35872bf55dd708f33a6709087d14e7","permalink":"https://sumonbis.github.io/post/k-12-coding-competition-judge/","publishdate":"2018-04-14T00:00:00Z","relpermalink":"/post/k-12-coding-competition-judge/","section":"post","summary":"I was the judge of the K-12 computational thinking organized by the computer science department at Iowa State University.","tags":["Outreach","K-12"],"title":"Computational Thinking of K-12 Outreach Program","type":"post"},{"authors":null,"categories":null,"content":"Implementation I have implemented Java program that takes the six files as input, builds a Naive Bayes classifier and outputs relevant statistics. I have built the Naive Bayes classifier from the training data (train label.csv, train data.csv), then evaluated its performance on the testing data (test label.csv, test data.csv).\nDataset The 20 Newsgroups dataset is a collection of approximately 20,000 newsgroup documents, partitioned (nearly) evenly across 20 different newsgroups. It was originally collected by Ken Lang, probably for his Newsweeder: Learning to filter netnews[1] paper.The 20 newsgroups collection has become a popular data set for experiments in text applications of machine learning techniques, such as text classification and text clustering. The data is organized into 20 different newsgroups, each corresponding to a different topic.\nThe original data set is available at http://qwone.com/~jason/20Newsgroups/. It includes 18824 documents which have been divided to two subsets: training (11269 documents) and testing (7505 documents). The vocabulary.txt contains all distinct words and other tokens in the 18824 documents. train data.csv and test data.csv are formatted \u0026ldquo;docIdx, wordIdx, count\u0026rdquo;, where docIdx is the document id, wordIdx represents the word id (in correspondence to vocabulary.txt) and count is the frequency of the word in the document. train label.csv and test label.csv are simply a list of label id’s indicating which newsgroup each document belongs to. The map.csv maps from label id’s to label names.\nInstructions to run the program:\nCopy all *.java files to one directory. Place the data files in the same directory Use command line to run. i. cd to the directory. ii. Compile : $ javac *.java iii. Run: $ java NaiveBayes vocabulary.txt map.csv train_label.csv train_data.csv test_label.csv test_data.csv The detail results and output can be found here: https://github.com/sumonbis/NaiveBayesClassifier/blob/master/Result.pdf\nReferences Ken Lang, Newsweeder: Learning to filter netnews, Proceedings of the Twelfth International Conference on Machine Learning, 331-339 (1995). ","date":1509840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509840000,"objectID":"255797f5cc099c3f3f65f7ea2e913d4f","permalink":"https://sumonbis.github.io/academic-project/naive-bayes/","publishdate":"2017-11-05T00:00:00Z","relpermalink":"/academic-project/naive-bayes/","section":"academic-project","summary":"Classified text documents from a large pool using machine learning techniques. A Naive Bayes classifier was built to classify approximately 20,000 newsgroup documents.","tags":["big-data"],"title":"Naive Bayes Classifier for Text Documents","type":"academic-project"},{"authors":null,"categories":null,"content":"Near duplicate detection in a large collection of files is a well-studied problem in data science. Many Locality Sensitive Hashing (LSH) algorithms have been recently developed to solve this problem. Among them simhash is a very efficient LSH algorithm that uses probabilistic method to generate similar fingerprints for similar objects. In this project, we have implemented simhash algorithm to evaluate approximate cosine similarity between two documents from a large collection of files. We have preprocessed the documents, created word vectors with weight and then implemented simhash algorithm to generate 64-bit fingerprint of each document. Then we have implemented block permuted hamming search in our fingerprint space. Block permuted Hamming search helps us to reduce the time to find similar pairs significantly. However, we have to consider a few false negatives in this result. By designing the block permutation in a better way, we can reduce the false negative rate.\nDetail project report: https://github.com/sumonbis/NearDuplicateDetection/blob/master/Report.pdf\nProblem Definition Suppose, we have millions of documents and given a new document we have to find all the near duplicates (e.g., 95% or more similar) from the collection in a reasonable amount of time. We can divide the problem into two parts: how to measure similarity between two documents and how to find the similar documents form a large collection efficiently? Therefore, our goal is to solve the following problems:\nGiven two documents D_a and D_b, what is the similarity measure between them? Given a document D_a, find all the documents that are similar to D_a. Identify all the pairs in the collection that are near duplicate of each other. There are a few challenges related to the above problems. First, our algorithm should be designed for millions of documents. Second, the files should be compressed enough to fit in memory. Finally, the algorithm must be efficient to find near duplicate in small amount of time.\nSimhash Charikar’s simhash [1] is a dimensionality reduction technique which maps high dimensional documents to very small sized fingerprints. We can compute the Hamming distance of two finger- prints to measure the cosine similarity.\nAlgorithm The basic sketch of using simhash algorithm to measure similarity is:\nStep 1: Convert the document into set of features associated with weights. Step 2: Create f-bit fingerprint for each document. Step 3: Calculate Hamming distance between two fingerprints to measure similarity between corresponding documents. First, we have to choose features for each document. Feature selection also depends on the application. Word is a very obvious choice as features. We can also choose shingle as feature. A k-shingle is every k-length adjacent set of characters. Consider the sentence - “The earth is moving.” The set of k-shingles for k = 5: {The_e, he_ea, e_ear, _eart, . . .}. If the application requires such similarity measure that demands the order of appearance then shingle can be a good choice as feature. In this project, we used word as our feature. There are some preprocessing before converting them as set of features. We converted the whole document to lowercase as case sensitivity does not contribute to similarity score. Then we have removed the stop words (e.g., a, an, the etc.) and punctuation symbols which are common in every document. Next, the weight of each word is calculated. There are several ways to calculate the weight of each feature. The feature with more weight will contribute more to the similarity score. A very intuitive weight measure is the frequency of each term. The term which appears more in a document carries more weight. We can also use TF-IDF (Term Frequency-Inverse Document Frequency) as weight. After the preprocessing is done, we create f-bit binary fingerprint of each document using simhash algorithm. The value of f is 32 or 64 in practice. First, each feature is converted to a f-bit binary hash value using a uniformly distributed hash function (e.g., MD5, FNV, Murmur). Then we define a vector of length f, initially with all zero values. Now, we iterate through each bit position (1 to f). If the bit position is 1 then we add the weight and if the bit position is 0 then we subtract the weight. After all the iterations, we get a vector of real values of length f. Finally, if the ith value is negative we convert it to 0, otherwise we convert it to 1. Thus, we get f-bit fingerprint of a document.\nReferences Moses S Charikar. Similarity estimation techniques from rounding algorithms. Proceed- ings of the thiry-fourth annual ACM symposium on Theory of computing-ACM, pages 380–388, 2002. ","date":1507593600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1507593600,"objectID":"c5c0646b3cf6c66bb02e4bb4e42f2d81","permalink":"https://sumonbis.github.io/academic-project/simhash/","publishdate":"2017-10-10T00:00:00Z","relpermalink":"/academic-project/simhash/","section":"academic-project","summary":"Given millions of documents, for each file, rank the similar documents. I have preprocessed the documents, created weighted word vectors and then implemented Simhash (locality sensitive hashing algorithm to evaluate approximate cosine similarity) to generate 64-bit fingerprint of each document. Finally block permuted hamming search was implemented in the fingerprint space to find the near duplicate.","tags":["big-data"],"title":"Near Duplicate Detection Using Simhash","type":"academic-project"},{"authors":null,"categories":null,"content":"Public Key Encryption with Keyword Search (PEKS) is one of the most used method to search keywords over encrypted data.\nSuppose, Bob is sending email with specific keywords to Alice. Encrypted emails are stored in the server. Alice wants to search emails with keywords from email server but does not want to allow the server decrypt any email. The paper on PEKS [http://crypto.stanford.edu/~dabo/papers/encsearch.pdf] described two algorithms to achieve that goal.\nThe first algorithm takes less time and space compared to the second. However, the first one can not guarantee semantic security. The second one is semantically secure. But dictionary attack can help attackers to guess keywords and pose serious damage. I have resolved that issue using a Bloom Filter. The false positives of a bloom filter does not allow to make it susceptible to dictionary attack.\nIn this project, I have implemented the second algorithm of PEKS that originates form trapdoor permutations. Then I have implemented Bloom Filter that is used to search keywords over the hashmap.\n","date":1506902400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1506902400,"objectID":"c6cbf70de71c6cf5a6edff5ff1ee8450","permalink":"https://sumonbis.github.io/academic-project/encryption-with-bloom-filter/","publishdate":"2017-10-02T00:00:00Z","relpermalink":"/academic-project/encryption-with-bloom-filter/","section":"academic-project","summary":"PEKS with Keyword Search is one of the most used method to search keywords over encrypted data. However, semantic security is not preserved and dictionary attack can help attackers to guess keywords. This project solves that issue implementing PEKS and searching keywords over Bloom Filter.","tags":["Security","Database"],"title":"Public Key Encryption (PEKS) with Bloom Filter","type":"academic-project"},{"authors":null,"categories":null,"content":"Path ORAM is a simple oblivious RAM algorithm. While using cloud platform or any other insecure memory, attack can be made using the access pattern. Oblivious RAM is the way to hide the memory access pattern with some extra bandwidth and memory overhead.\nPath Oram Implementation Path ORAM uses a binary tree to store all memory blocks. Each node of the tree is a bucket which can contain a fixed number of block. First, we define all necessary data structure. The depth of the tree is ceiling(log N). The empty blocks are filled with dummy data. Each leaf node is a distinct branch and each block is mapped to a random branch. For each operation, we perform read and write through the branch. Since, the blocks are positioned to different branches, repeated operations do not disclose any information. A local memory is used to read and re-write the data. Path ORAM uses limited amount of memory and bandwidth with respect to other oblivious algorithms. This is an implementation described in the following paper: https://people.csail.mit.edu/devadas/pubs/PathORam.pdf\nSecurity Path ORAM changes the location of block repeatedly and accesses the whole branch for a single block. Therefore, the pattern of access is always random. However, the security is dependent mostly on the random branch selection of the blocks. We used python package numpy to obtain uniformly distributed random integer.\nPerformance For each access, we go through the whole path twice, once for reading and again for writing. So, we need to access twice the depth of the tree. Since, depth is ceiling(log N), the performance also sticks to that.\nUnit Test The correctness holds because the path we access includes the intended block. And after each access the block is remapped to another branch so that access to same block does not repeat the same set of blocks.\n","date":1484265600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1484265600,"objectID":"a4a47b58fdc6f8bd6b90f318f7662759","permalink":"https://sumonbis.github.io/academic-project/path-oram/","publishdate":"2017-01-13T00:00:00Z","relpermalink":"/academic-project/path-oram/","section":"academic-project","summary":"While using cloud platform or any other insecure memory, attack can be made using the access pattern. Oblivious RAM is the way to hide the memory access pattern with some extra bandwidth and memory overhead. Path ORAM uses a binary tree to store all memory blocks and changes the location of the blocks repeatedly to access the whole branch for a single block.","tags":["Security"],"title":"Path ORAM (Oblivious Random Access Memory)","type":"academic-project"},{"authors":null,"categories":null,"content":"Summary From a given snapshot of a social network database, we can predict whether a person can be potentially connected to another person, by analyzing existing links. We take two datasets (Facebook dataset from Stanford Large Network Dataset Collection and bibliography dataset from DBLP) and import that into MySQL, and Neo4J (Graph based DB) to evaluate the metrics for different network topology.\nAbstract For the past one decade, social network has gained a lot of popularity and more users are making their online presence to connect. Hence, it brings up new challenges for analyzing data generated from these users. One such analysis is the social connection between two users. A lot of work has been done in the past with regard to link analysis. From a given snapshot of a social network database, we can predict for a given person (or the entire network), the people who she can be potentially connected to, by analyzing her existing links. Although there are is a lot of effort put into developing new prediction techniques, there is no solid function for analyzing which database is suited for a particular link analysis method. Link prediction can be done either for the entire network, or for a small subset of the network graph centered on a particular user. We consider the latter in this project.\nWe take open datasets and import it into MySQL (for relational), and Neo4J (for Graph based) and evaluate several link metrics. Experimentally, we plan on classifying how performance varies with respect to metrics for different databases. We also plan to analyze on how link metrics vary according to the network topology/parameters. We try to improve the performance of the queries implemented in the referenced paper : “Implementing link-prediction for social networks in a database system” by Sarah Cohen et al. Our experiment is performed on eight different real social network datasets taken from SNAP and DBLP databases. Finally, the results verify that the changes brought about in the neo4J schema and query structure improve the performance.\n","date":1471219200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1471219200,"objectID":"c6977b6157935b9d513d8d276ad4561a","permalink":"https://sumonbis.github.io/academic-project/social-network/","publishdate":"2016-08-15T00:00:00Z","relpermalink":"/academic-project/social-network/","section":"academic-project","summary":"From a given snapshot of a social network database, we can predict whether a person can be potentially connected to another person, by analyzing existing links. We take two datasets (Facebook dataset from Stanford Large Network Dataset Collection and bibliography dataset from DBLP) and import that into MySQL, and Neo4J (Graph based DB) to evaluate the metrics for different network topology.","tags":["Social-network","Database"],"title":"Performance Benchmarking for Link Prediction Algorithms in Social Networks","type":"academic-project"},{"authors":["Manan B T Noor","Sumon Biswas"],"categories":["conference"],"content":" ","date":1432261533,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1432261533,"objectID":"891c6a41b22c84b9e97cfb7072703953","permalink":"https://sumonbis.github.io/publication/iceeict15b/","publishdate":"2015-05-21T21:25:33-05:00","relpermalink":"/publication/iceeict15b/","section":"publication","summary":"This paper shows a concern on the security element in cloud environment for small business addressing their shortcomings and finding solutions for it. Measured security features have been implemented by developing a secured data encryption, exchange and decryption infrastructure resulting in a data security model.","tags":["security","cloud computing","data science"],"title":"A Secure Data Security Infrastructure for Small Organization in Cloud Computing","type":"publication"},{"authors":["Sumon Biswas","M Shamim Kaiser","Shamin Al Mamun"],"categories":["conference"],"content":" ","date":1432261533,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1432261533,"objectID":"29621d9548271a58b442022e18b171a8","permalink":"https://sumonbis.github.io/publication/iceeict15a/","publishdate":"2015-05-21T21:25:33-05:00","relpermalink":"/publication/iceeict15a/","section":"publication","summary":"Ant colony optimization (ACO) based algorithm has been proposed which will generate set of optimal paths and prioritize the paths. Additionally, the approach generates test data sequence within the domain to use as inputs of the generated paths. Proposed approach guarantees full software coverage with minimum redundancy.","tags":["aco","genetic","testing","software","program analysis"],"title":"Applying Ant Colony Optimization in Software testing to Generate Prioritized Optimal Path and Test Data","type":"publication"},{"authors":["Sumon Biswas","Anisuzzaman","Tanjina Akhter","M Shamim Kaiser","Shamim Al Mamun"],"categories":["conference"],"content":" ","date":1419301533,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1419301533,"objectID":"36020c0ae04d945ff716655927736813","permalink":"https://sumonbis.github.io/publication/iccit14/","publishdate":"2014-12-22T21:25:33-05:00","relpermalink":"/publication/iccit14/","section":"publication","summary":"In this article, a three tier cloud based application “eHealth Cloud” has been developed which will involve different parties to improve old-fashioned healthcare system. RIA (Rich Internet Application) based client, SimpleDB based server and a logic layer have been designed to build an easily accessible network.","tags":["cloud computing","data science","healthcare"],"title":"Cloud Based Healthcare Application Architecture and Electronic Medical Record Mining: An Integrated Approach to Improve Healthcare System","type":"publication"},{"authors":null,"categories":null,"content":"This project contains one desktop app (for doctors) and two client side app (for doctors and patients).\nDesktop App A windows application software has been built which will be installed on doctors’ computer. This software is a standalone one and can be maintained by one single doctor.\nThe doctor will enter every patient’s information and generate prescription using this software. Then the prescription can be printed and handed over to patient. One copy electronic prescription will be sent patient’s email address as well. The appointment system will be maintained by the system using SMS. Two basic operation are handled by the software:\nElectronic prescription module Patient scheduling and queue management using SMS Electronic Prescription Module Electronic prescription handling Medicine suggestion Store all prescription Print prescription Email prescription Patient’s Scheduling and Queue Management Using SMS Make appointment sending SMS Reply sending date and time to patients The system maintains the patient list and calendar Any greeting or emergency message can be sent to the patients Used Tools and Technologies This is a windows based application developed on .Net Platform. The windows form is built on Visual Studio 2012. SQL Server 2008 is used for database support. Here are the technology specifications:\nVisual Studio 2012 2. .Net 4.5 C# SQL Server 2008 AT Command: AT commands are used to control GSM or GPRS modems. This command can be executed by the modems to perform particular tasks like send- ing SMS to a number, receiving and save message to SIM memory, deleting SMS etc. Actually, it performs operation on the SIM which is mounted on the modem. The command can connect modems to specific ports of the desktop computer and perform tasks. C# language was used to manipulate the AT commands.\nCrystal report SAP: There are different crystal reporting system which can be installed on Visual Studio to provide report querying from database. RDLC, SAP are mostly used. Electronic prescription reporting is provided by SAP Crystal Report 13. The SAP Crystal Report allows one to generate prescription, save as PDF format, and print report.\nAndroid Applications 1. Doctor’s Window This application runs on doctor’s mobile android phone or tab. Every doctor has create account with his/her email and user ID. When the doctor created an account with the system, he/she is taken to the profile update form. Then the doctor enters his/her name, designation, specialty, institution, address, contact number and the visiting time to complete the profile. Once profile is completed he/she can login to the app and see his own patient’s list by date.\n2. Patient’s Window This application runs on the client’s smart devices to connect the desired doctor. No login or registration is required for this app. Anyone using this app will easily find different categories of specialty. Then he/she will be able to find doctors from different localities. The patient will choose doctor and see doctor’s detail informa- tion. Then he/she will click the “Get Appointment” button to seek for appointment. An automated scheduling system will run on the app server based on the doctor’s predefined time. This will check for free space and make the patient known about the appointment date and time. Eventually, the app will notify the patient before the appointment. Only one has to enter name, age and phone number for seeking appointment.\n","date":1397952000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1397952000,"objectID":"d818a811ce12d4e459d8e0dae1b1a70a","permalink":"https://sumonbis.github.io/academic-project/doctors-window/","publishdate":"2014-04-20T00:00:00Z","relpermalink":"/academic-project/doctors-window/","section":"academic-project","summary":"This is a complete solution for private practitioner doctors. The doctors can manage patients appointment automatically, generate electronic prescriptions and store patients database. The patient side app helps to schedule appointment, get notification and view medical history.","tags":["Cloud-computing","Software-developement"],"title":"Doctors Window (A solution for Doctors and Patients)","type":"academic-project"},{"authors":null,"categories":null,"content":"“Tank Battle” is a game where you have to shoot at the enemy tanks at a high speed in different angle to destroy and continue. Enemies attack in a higher speed and try to enter passing the gamer’s tank. If any enemy tank passes you are defeated and the game is over. You can play again to try a higher score. This is a single player game and gives the gamer an immense pleasure and challenging environment. The attractive graphics and music takes to the real battlefield feel the fight.\nFeatures:\nSuperb quality graphics Attractive sound Extremely addictive gameplay Enemies power up gradually Shoot, destroy thousands of tanks and enjoy Game screens: Home Screen Game Screen Score Screen ","date":1395100800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1395100800,"objectID":"117d5e492935e2a27de280d3da80b8d1","permalink":"https://sumonbis.github.io/academic-project/tank-battle/","publishdate":"2014-03-18T00:00:00Z","relpermalink":"/academic-project/tank-battle/","section":"academic-project","summary":"“Tank Battle” is a game where you have to shoot at the enemy tanks at a high speed in different angle to destroy and continue. Enemies attack in a higher speed and try to enter passing the gamer’s tank.","tags":["Game","Android"],"title":"Tank Battle (Android Shooting Game)","type":"academic-project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://sumonbis.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"},{"authors":null,"categories":null,"content":"I was a TA for the course in 3 semesters and got a chance to teach a diverse class of ~250 students. The course taught software engineering concepts and developing a large software (from idea to release) throughout the semester in a team of four.\nMy responsibilities included weekly lecture in a section of 30 students, supervising 8 project teams (32 students), and creating video tutorials. The project supervision was a great opportunity to closely work with students, meet weekly, explain requirements, monitor deliverables in Trello, review code in Git, etc. Many of my supervised teams built complex software with Android client, Spring back-end, concurrent features, audio-video communication, etc. In two out of three semesters, my supervised teams won the best project award in the whole class.\nTopics Develop complex software in a team: from idea to release Software development criteria: client-server architecture, relational database, multi-user setting, concurrent features e.g., online chat Using Software Engineering tools, IDE, source-control e.g., Git SE lifecycle My responsibilities Weekly lecture (1 hour) in a class section of ∼30 students on design pattern version-control database design client-server configuration, etc. Supervise 4-member teams developing software projects throughout the semester Prepare and record screencasts: Create short videos for the tools and technologies used in the SE lifecycle. Examples include: develop first Android app how to host project to Linux server Using MySQL Workbench for to remote database server, etc. Below is a screencast example video for writing the first Android app on Android Studio and run on simulator. A playlist of screencasts can be found here.\nSupervised projects Project supervision In each semester, supervised 8 out of ~55 software teams. Tasks include: weakly meeting, explain software requirements and deliverables, solve problems\nProject evaluation Evaluate demonstrations UI design Code review: functionality, quality, bugs, etc. Teamwork: Weakly project reporting. Fall 2017 Battle of the Worlds: Battle of the Worlds is a web-based action role-playing game which allows users to battle alongside each other using their favorite warriors and level up as they adventure through the game.\nTechnologies: HTML, Node JS, Express, Socket, SQL. Pre Park: The app will allow users to pre pay for parking spots in lots set up by either individuals, companies, or government agencies. App will have admins, who run the application, managers, who set up the lots, and users, who pay for and park in the spots. App will send users notifications when they get closer to the time they have to be at the lot by.\nTechnologies: Android, SQL. Run Samurai, Run: This is a top-down 2D infinite side scrolling runner game for mobile devices where the user will be able to take control of a small ninja and run and fight through mobs of enemies.\nTechnologies: Android, P5 (JS library), SQL. CyDisc: Android based app to help scorekeeping, while disc golfing with friends. It will allow users to create an account which will store their records and gear information. This allows for a leaderboard system to compare your standings with other players. Users will also be able to view course information such as details, user-voted tips, and user-uploaded pictures.\nTechnologies: Android, SQL. Songusoid: A musical phone app for the android platform. This application will create short randomize songs based on various algoirthms/methods by playing various keys from various instruments.\nTechnologies: Android, SQL, Web. Cute and Fluffy: A 2D, turn-based strategy game. The game will involve a map containing terrain types and units. The game will include aspects like fog of war, terrain effects, and unit control. It is a web browser game with the potential to create an app for gameplay on phones.\nTechnologies: Web, Java, SQL. Spring 2018 HabiTracker: A web app that allows users to define a habit that they want to keep track of (such as exercising or working on a project) during the time span of a week. The user can set and adjust their own goals (such as 3 times/hours a week) and the app will display the percentage of the goal that they have recorded completing so far. The user can track multiple habits at once. The app can be used for personal habit tracking as well as for teams.\nTechnologies: Android, Spring Boot. Smart Art: An online art board which enables creative minds to share and contribute to a global network of art. The art board will allow anyone to contribute to a single board on the landing page (global board). If a user would like to create an account, they are able to create their own canvas to work privately, they are also able to invite other users to work on a canvas together.\nTechnologies: Android, Spring Boot. Image Guesser: Image Guesser is a multiplayer game about guessing partially hidden images. A central server would send out pieces of a picture to be displayed on player’s android device. The device would render the picture pieces displaying a more cohesive image. Users could then guess what the image is of. Whoever guesses correctly first wins the game. Additionally, users will get whatever the closest guess was.\nTechnologies: Android. CyBike: The project is a bicycle rent system on mobile to help ISU students to find public bike and ride around campus/Ames. First we have different categories of users: leasee (student or social elite), repairman, administrator. Leasees are like users, we can build login system for different types of people, such as students, ISU staff or social elite. Different people may have different policy on bicycle renting. After sign in or sign up, there is a button for start finding a bike near you. The idea about rent and return is base on the mobile positioning system. When you start finding a bike, the app will get your coordinates from mobile and matching the nearest bike coordinates for you.\nTechnologies: Android, Spring Boot. Next Generation 911 (best project award ⭐): This project aims to help 911-emergency operator to help locate the caller in seconds. Due to the use of outdated technology, more than 50% of the calls made to the emergency response team fails to locate the caller, and this project provides a solution, saving precious lives.\nTechnologies: Android, Spring Boot, Java. CyChat: We are going to make a chat application called Cychat to support on PC and Android sides. This application has three different categories of users: administrators, managers, users. Users can register accounts to login chat system. They can search for friends and add them, and then chat with each other.\nTechnologies: Android, Java Spring. Time Flies: TimeFlies is a group-oriented organization application targeting Iowa State students and faculty. It will have a conglomeration of features designed to facilitate the logistics of group work. A main feature include automatic schedule generation that accounts for every group member\u0026rsquo;s ISU class schedule. We take this pool of schedules and calculate the best possible time blocks in which most group members can meet. The first person in a group is the group leader and the leader may create surveys, assign tasks and give away his or her position to someone else in the group.\nTechnologies: Android, Spring Boot. Fall 2018 Business QR: An app built to replace business cards, this project will help students organize and strengthen their networking efforts in order to build a better career for themselves. Instead of carrying around large amounts of business cards, recruiters/professionals can just carry around one QR code on either their phone or in physical form. When intending to hand out their business information, the recipient will just scan the code, and the information will be added to this app, which will serve as a business address book. Information given can with the code can include, name, company, position, contact information, and a photo, all optional. This can be especially useful at career fairs, where instead of jotting down notes on the back of a notecard and trying to remember vague details about the encounter, the app will allow you to insert your own notes for each contact.\nTechnologies: Java, Android, Firebase. CookBuddy: Though a mobile or web app, users will be able to add recipes to their online cookbooks which can then be sorted by a number of preferences such as number of calories, cost of ingredients, or dietary restrictions (gluten, peanuts, etc.). The program will also allow users to submit a list of recipes, which will then return a shopping list of ingredients (and how much of each) required to make those recipes. This will also work the other way around, give the program a list of ingredients you have around your home and it will return a list of possible recipes that can be made with those ingredients. Through the app users will be allowed to share, rate, and discuss recipes with others, like a social media platform for cooking.\nTechnologies: Java, Android, MySQL. ISU Service: Our project will allow users to offer or request freelance services to other users of the service. We intend to target first just the local Iowa State University area as users, with possible further expansion. Users will create an account and sign into our website. They can then create an offering. They do this by listing what they will offer (service/product/\u0026hellip;), their contact information, and the price of their services, and a location marker of where they\u0026rsquo;re located (for future expansion). Other users can then purchase these products/services. A user can also request a service.\nTechnologies: C#, Angular, SQL, Windows Server. Twenty One: Our project will be a blackjack game and training application. The player will be able to join a lobby to play against other players in real time or play against a computer. There is also a training aspect where it will tell you if you made the correct or incorrect decision in real time. We will also have other helpful bits of information like tips/tricks and an odds table for decision making.\nTechnologies: Java, Android, Spring, SQL. Dog Matcher: This would be implemented as a web-app that would be geared towards mobile devices. It would allow animal shelters to post their animals for the public to swipe through, in a Tinder-esque style, to find their dream pet. Pets would have certain characteristics (child friendly, breed, behavior, etc.) and members of the public would set certain things in their profile as well (does the animal need to be hypoallergenic, kid friendly, a certain breed).\nTechnologies: Node, JS, Mongo DB. Project X (best project award ⭐): The first part of our project will be a open-source desktop 2D game engine. The engine will be capable of rendering a game using OpenGL and have interactivity between players using peer-to-peer. In addition to the game engine we are also creating a simple pixel art styled, top-down desktop game that will utilize our custom made game engine for fun little demonstration of the capability and versatility of the engine.\nTechnologies: Java, OpenGL, JS. Movie App: This app will be a place for users to share what movies they have watched. This app will focus on the social aspect and less on the movies themselves. Users will be able to find their friends and see what movies they\u0026rsquo;ve watched. Users will be able to post reviews on their profiles. Friends will be able to comment on their friends\u0026rsquo; posts and reviews.\nTechnologies: Java, Android, SQL. Campus Connections: The team will design and develop a mobile application, Campus Connections, intended to function as an on-campus social media platform to match students with study partners. In the application, the end-user will be able to create a profile as well as view the profile(s) of each student who is taking the same course(s). The application will strengthen and build community in the classroom and on campus. Only students with a valid ISU email address will be able to access and post requests in the application.\nTechnologies: Python, MongoDB. ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"93c603f9650e03633091020263e4558b","permalink":"https://sumonbis.github.io/courses/software-development/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/software-development/","section":"courses","summary":"I was a TA for the course in 3 semesters and got a chance to teach a diverse class of ~250 students. The course taught software engineering concepts and developing a large software (from idea to release) throughout the semester in a team of four.","tags":["Courses"],"title":"COMS 309: Software Development Practices","type":"courses"},{"authors":null,"categories":null,"content":"This is one of the largest computer science classes taught at Iowa State. The course was extensive in teaching advanced programming through unmanaged languages, which allowed students to learn memory management, concurrent and network programming, etc. I taught the course for three semesters and invested most of the time with students in problem-solving, live coding, debugging, and testing.\nI conducted long programming sessions (~4 hours), helped the instructor in designing tests, and grade programming assignments. Being heavy on the practical side, I taught many of the abstract programming paradigms in live coding sessions with examples. I taught students to explain the coding steps of brainstorming, writing the simpler solution and then optimizing, while they solve a problem.\nTopics Differences between managed (Java) and unmanaged languages (C/C++) Design and build large programs from specification Memory management in C and C++ Templates and standard library Concurrent and network programming My responsibilities Assist students with large programming projects and assignments Long programming sessions (~4 hours) Debugging and pair programming Prepare and grade tests Teach usage of the tools and technologies Technologies used GDB Valgrind Ncurses Build systems e.g., Make ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"ad4befc2808c3759eaeca82afad2bdef","permalink":"https://sumonbis.github.io/courses/advanced-programming/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/advanced-programming/","section":"courses","summary":"This is one of the largest computer science classes taught at Iowa State. The course was extensive in teaching advanced programming through unmanaged languages, which allowed students to learn memory management, concurrent and network programming, etc.","tags":["Courses"],"title":"COMS 327: Advanced Programming Techniques","type":"courses"}]