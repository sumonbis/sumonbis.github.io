<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects | Sumon Biswas</title>
    <link>https://sumonbis.github.io/project/</link>
      <atom:link href="https://sumonbis.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    <description>Projects</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2021 Sumon Biswas</copyright><lastBuildDate>Sat, 18 Dec 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://sumonbis.github.io/media/logo.svg</url>
      <title>Projects</title>
      <link>https://sumonbis.github.io/project/</link>
    </image>
    
    <item>
      <title>Design and Architecture of Data Science Pipelines</title>
      <link>https://sumonbis.github.io/project/design-architecture-ds/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://sumonbis.github.io/project/design-architecture-ds/</guid>
      <description>&lt;p&gt;Data science processes are becoming an integral component of many software systems today. In data-driven software, the processes are organized in several stages such as data acquisition, data preprocessing, modeling, training, evaluation, prediction, and so on, where the data flow from one stage to another. The stages with different subtasks, their connections, and feedback loops, create a new kind of software architecture called Data Science Pipeline. In order to design and build software systems with data science stages effectively, we must understand the structure of the data science pipelines. We demonstrated the importance of standardization and analysis framework for data science pipelines. We took the first step to understand the architecture and patterns of data science pipelines from theory and practice. &lt;/p&gt;
&lt;p&gt;We conducted a three-pronged study to draw observations from pipelines in the literature and popular press, smaller data science tasks, and large projects. They investigated the representation of the pipeline structure, its organization, and characteristics. What are the typical stages of a data science pipeline? How are they connected? Do the pipelines differ in the theoretical representations and that in the practice? Today we do not fully understand these architectural characteristics. The study resulted in three representative pipeline structures. The work also informs the terminology and design criteria for pipelines. For example, a number of stages from theory are absent in the pipelines in small data science programs without a clear separation of stages. On the other hand, the pipelines in large data science projects develop complex pipelines with feedback loops and sub-pipelines. The stage boundaries are stricter in large projects, which is necessary for scalability, maintenance, and testing of pipelines. The results will facilitate pipeline architects, practitioners, and software engineering teams to compare with existing and representative pipelines. For instance, a data scientist can identify whether the pipeline is missing any important stage or feedback loops in an earlier stage of development lifecycle, which will save much time and effort.&lt;/p&gt;
&lt;p&gt;We presented the results of the paper entitled &amp;ldquo;The Art and Practice of Data Science Pipelines: A Comprehensive Study of Data Science Pipelines In Theory, In-The-Small, and In-The-Large&amp;rdquo;, in the research technical track of the 44th International Conference on Software Engineering (ICSE 2022) held in Pittsburgh, PA, USA from May 21-29, 2022.&lt;/p&gt;
&lt;p&gt;The project has been supported in part by the National Science Foundation TRIPODS institute at ISU called D4 (Dependable Data-Driven Discovery). D4 has a broader goal of increasing dependability in data science pipelines by addressing various critical properties of pipelines such as fairness, complexity, uncertainty, and so on. The preprint of the paper is now available. Also, the artifact containing data and code are evaluated and published for future work in the area.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Causal Fairness in Machine Learning Pipeline</title>
      <link>https://sumonbis.github.io/project/modular-fairness/</link>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      <guid>https://sumonbis.github.io/project/modular-fairness/</guid>
      <description>&lt;p&gt;Software fairness has been violated in many critical predictive applications in recent times. We have seen a number of those news in last few yers.
The machine learning (ML) models used to make the predictions can exhibit bias for various reasons. In this project, we address the &lt;em&gt;algorithmic fairness&lt;/em&gt; of the models, which is measured from the predictions of the model.&lt;/p&gt;














&lt;figure  id=&#34;figure-reported-fairness-violations&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Reported fairness violations&#34; srcset=&#34;
               /project/modular-fairness/news_hu3233d3db2e418be631d6910f666245d9_5012327_46019d95c58d1b31ccdfb7e1814ec458.jpg 400w,
               /project/modular-fairness/news_hu3233d3db2e418be631d6910f666245d9_5012327_2a36cd5627ba236ea243abbddeb4c04f.jpg 760w,
               /project/modular-fairness/news_hu3233d3db2e418be631d6910f666245d9_5012327_1200x1200_fit_q75_lanczos.jpg 1200w&#34;
               src=&#34;https://sumonbis.github.io/project/modular-fairness/news_hu3233d3db2e418be631d6910f666245d9_5012327_46019d95c58d1b31ccdfb7e1814ec458.jpg&#34;
               width=&#34;760&#34;
               height=&#34;390&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Reported fairness violations
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Many research looked at the problem and proposed different measures and mitigations to make the models fairer. However, the prior works consider the ML model wholistically as a black-box, and do not look at the fairness of components in the ML pipeline. ML pipeline can have several components and stages such as preprocessing, training, tuning, evaluation, etc. Each of them can affect the ultimate fairness of the model. Our goal is to investigate the fairness in the component-level and identify the modules that are causing the unfairness.&lt;/p&gt;














&lt;figure  id=&#34;figure-reported-fairness-violations&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Reported fairness violations&#34; srcset=&#34;
               /project/modular-fairness/black-box_hu309927eb576099c7084cf9aed61d13b6_83467_c2d7ec41a2a83694864295033989e2f5.png 400w,
               /project/modular-fairness/black-box_hu309927eb576099c7084cf9aed61d13b6_83467_586a4e5f594e218262325243c671596d.png 760w,
               /project/modular-fairness/black-box_hu309927eb576099c7084cf9aed61d13b6_83467_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://sumonbis.github.io/project/modular-fairness/black-box_hu309927eb576099c7084cf9aed61d13b6_83467_c2d7ec41a2a83694864295033989e2f5.png&#34;
               width=&#34;432&#34;
               height=&#34;196&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Reported fairness violations
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;First, we do not consider the whole ML model as a single black box. Along with commenting on the fair of unfair behavior of the whole model, we look inside the black box and try to understand which components are responsible for the unfairness of the model. &lt;a href=&#34;https://sumonbis.github.io/publication/esec-fse21/&#34;&gt;Our FSE&#39;21 paper&lt;/a&gt; paper focused on identifying unfair preprocessing stages in ML pipeline.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    What is the fairness measure of a certain component/stage (e.g., imputation, scaling, etc.) in ML pipeline?
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Look at the following ML pipeline which is taken from the &lt;a href=&#34;https://github.com/propublica/compas-analysis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;crime prediction analysis repository of Propublica&lt;/a&gt;. The pipeline operates on Compas dataset that contains records of about 7k defendants in Florida. This was used at US courts in at least 10 states including New York, Wisconsin, California, Florida, etc &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. The pipeline transforms data using six data transformers before applying the LogisticRegression model. For example, in line 2-5, custom data filtration was applied, and in line 12, an imputation method from the library was applied to replace the missing values for the feature &lt;code&gt;is_recid&lt;/code&gt;. When we measure the fairness of this model using existing metrics such as statistical parity or equal opportunity, that does not say anything about the fairness of these data transformers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(f_path)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;days_b_screening_arrest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;days_b_screening_arrest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_recid &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c_charge_degree &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;score_text &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N/A&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Medium&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Low&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LabelEncoder()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit_transform(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;score_text)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;impute1_onehot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pipeline([
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;imputer1&amp;#39;&lt;/span&gt;, SimpleImputer(strategy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;most_frequent&amp;#39;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;onehot&amp;#39;&lt;/span&gt;, OneHotEncoder(handle_unknown&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;))])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;impute2_bin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pipeline([
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;imputer2&amp;#39;&lt;/span&gt;, SimpleImputer(strategy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;discretizer&amp;#39;&lt;/span&gt;, KBinsDiscretizer(n_bins&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, encode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ordinal&amp;#39;&lt;/span&gt;, strategy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uniform&amp;#39;&lt;/span&gt;))])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;featurizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ColumnTransformer(transformers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;impute1_onehot&amp;#39;&lt;/span&gt;, impute1_onehot, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is_recid&amp;#39;&lt;/span&gt;]),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;impute2_bin&amp;#39;&lt;/span&gt;, impute2_bin, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;])])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pipeline &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pipeline([(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;features&amp;#39;&lt;/span&gt;, featurizer),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;classifier&amp;#39;&lt;/span&gt;, LogisticRegression())])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We used causal reasoning in software to identify the fairness impact of those stages in the prediction.&lt;/p&gt;
&lt;h2 id=&#34;causality-in-software&#34;&gt;Causality in Software&lt;/h2&gt;
&lt;p&gt;Identifying causal effects has been an integral part of scientific inquiry. It helped to answer a wide range of questions like - understanding behavior in online systems, or effect of social policies, or risk factors for diseases and so on.&lt;/p&gt;
&lt;p&gt;In causal testing, given a failing test, causal experiments are conducted to find a set of test-passing inputs that are close to the failing input.
In this project, we also used this casual modeling on the pipeline. We intervene on one variable of interest at a time and observe the change in the outcome.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    For two random variables $X$ and $Y$, we say that $X$ causes $Y$ when there exist at least two different interventions on $X$ that result in two different probability distributions of $Y$.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;causality-in-fairness&#34;&gt;Causality in Fairness&lt;/h2&gt;
&lt;p&gt;Causality in fairness has also been studied in the literature. “Other things being equal”, prediction would not have changed in the counterfactual world, where only the intervened variable would have changed.&lt;/p&gt;
&lt;p&gt;A predictor $\hat{Y}$ is said to satisfy causal fairness if&lt;/p&gt;
&lt;p&gt;$$
P(\hat{Y}(a, U) = y | X = x, A = a) = P(\hat{Y}(a&amp;rsquo;, U) = y | X = x, A = a)
$$&lt;/p&gt;
&lt;p&gt;We create an alternative pipeline $\mathcal{P}* $ from the given pipeline $\mathcal{P} $ by removing the preprocessing stage in consideration. Then we look at the prediction disparity between $\mathcal{P} $ and $\mathcal{P}* $. The disparity can be fairness satisfying or not. To evaluate that, we used the existing fairness criteria from the literature.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Thus, we proposed four novel metrics to measure fairness of a stage in the ML pipeline.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We observed a number of patterns of fairness of the the data transformers that are commonly used in pipelines.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Data filtering and missing value removal change the data distribution and hence introduce bias in ML pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New feature generation or feature transformation can have large impact on fairness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encoding techniques should be chosen cautiosly based on the classifier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similar to the tradeoff between the accuracy and fairness for the classifier, the stages of the pipelines also exhibit the tradeoff. Often the accuracy-improve data transformer is unfair.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Among all the transformers, applying sampling technique exhibits most unfairness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Selecting a subset of features often increase unfairness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feature standardization and non-linear transformers are fair transformers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Furthermore, another impact that our method could attain is that we can instrument the pipeline. A pipeline can have a unfair stage that favors the privileged. Similarly, there can be another stage that favors the unprivileged. Both stages can be used in a pipeline such that their unfairness is canceled.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The fairness composition can help to choose appropriate alternatives while development and improve the overall fairness.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We noticed that the most popular fairness packages (e.g., &lt;a href=&#34;https://aif360.readthedocs.io/en/latest/#&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AIF360&lt;/a&gt;) uses a default data preprocessing each time users import datasets from the packages. There is no option to control or measure the unfair stages in the pipeline. Our early results would provide guidance to analyze fairness at a component-level. Further research in the area is in progress to understand fairness composition and optimize the pipeline construction.&lt;/p&gt;
&lt;!-- 






  
    

&lt;div class=&#34;pub-list-item&#34; style=&#34;margin-bottom: 1rem&#34;&gt;
  &lt;i class=&#34;far fa-file-alt pub-icon&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;

  
  

  &lt;span class=&#34;article-metadata li-cite-author&#34;&gt;
    

  &lt;span class=&#34;author-highlighted&#34;&gt;
      Sumon Biswas&lt;/span&gt;, &lt;span &gt;
      Hridesh Rajan&lt;/span&gt;
  &lt;/span&gt;
  &lt;div&gt; 
    &lt;a href=&#34;https://sumonbis.github.io/publication/esec-fse21/&#34;&gt;Fair Preprocessing: Towards Understanding Compositional Fairness of Data Transformers in Machine Learning Pipeline&lt;/a&gt;
  &lt;/div&gt;
  In 29th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE), Athens, Greece,
  2021.

  
  &lt;div class=&#34;btn-links&#34;&gt;
    








  





&lt;a href=&#34;#&#34; class=&#34;btn btn-outline-primary btn-page-header btn-sm js-cite-modal&#34;
        data-filename=&#34;/publication/esec-fse21/cite.bib&#34;&gt;
  Cite
&lt;/a&gt;


  
  
    
  
&lt;a class=&#34;btn btn-outline-primary btn-page-header btn-sm&#34; href=&#34;https://github.com/sumonbis/FairPreprocessing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  Code
&lt;/a&gt;












&lt;a class=&#34;btn btn-outline-primary btn-page-header btn-sm&#34; href=&#34;https://doi.org/10.1145/3468264.3468536&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  DOI
&lt;/a&gt;


  
  
  
    
  
  
  
  
  
    
    
      
    
  
  &lt;a class=&#34;btn btn-outline-primary btn-page-header btn-sm&#34; href=&#34;https://sumonbis.github.io/uploads/causal-reasoning-FSE21.pdf&#34; &gt;
    &lt;i class=&#34;fas fa-file-pdf mr-1&#34;&gt;&lt;/i&gt;
    PDF
  &lt;/a&gt;

  
  
  
  
  
  
  
    
  
  &lt;a class=&#34;btn btn-outline-primary btn-page-header btn-sm&#34; href=&#34;https://arxiv.org/abs/2106.06054&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
    &lt;i class=&#34;ai ai-arxiv mr-1&#34;&gt;&lt;/i&gt;
    arXiv
  &lt;/a&gt;

  
  
  
    
  
  
  
  
  
    
  
  &lt;a class=&#34;btn btn-outline-primary btn-page-header btn-sm&#34; href=&#34;https://youtu.be/X-Nvn6DhHsA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
    &lt;i class=&#34;fab fa-youtube mr-1&#34;&gt;&lt;/i&gt;
    Talk
  &lt;/a&gt;


  &lt;/div&gt;
  

  
&lt;/div&gt;

  

 --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.propublica.org/article/machine-bias-risk-assessments-in-criminal-sentencing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.propublica.org/article/machine-bias-risk-assessments-in-criminal-sentencing&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Fairness Engineering in ML Models</title>
      <link>https://sumonbis.github.io/project/empirical-fairness/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      <guid>https://sumonbis.github.io/project/empirical-fairness/</guid>
      <description>&lt;p&gt;Software engineering (SE) research has focused on identifying, localizing, and repairing defects in software systems. With the evolution of programming languages, coding practices and requirements, various kinds of bugs of software has drawn interest. Recent trend of machine learning techniques has raised the question of dependability of the predictive decisions. Fairness of the machine learning (ML) models has been an open issue for such software systems in last few years. In critical decision making such as loan approval, crime prediction, college admission or hiring employees, ML algorithms are being used. However, the problem of fairness has not been studied by the SE community as much as the ML community looked into it. We conducted an empirical study in &lt;a href=&#34;https://sumonbis.github.io/publication/esec-fse20/&#34;&gt;our FSE&#39;20 paper&lt;/a&gt; to investigate a number of SE concerns of measures, mitigation, and impact of unfairness in ML models.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is important to ensure the fairness of the ML models so that no discrimination is made based on protected attribute (e.g., race, sex, age) while decision making.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, it is important to look at the real-world software systems to understand the state of unfairness. Most of the study experiment using default-set classifiers from libraries. Thus, often the real faults and concerns with fairness are missed. However, it might be difficult to find such open-source models in the wild. We found a good number of models from Kaggle that helped to point down fairness issues in the wild.&lt;/p&gt;
&lt;h2 id=&#34;fairness-measures&#34;&gt;Fairness Measures&lt;/h2&gt;
&lt;p&gt;The foremost big concern is that how do we know there is a fairness issue in my model. Well, it depends on the stakeholder and the context. The participants could ask for &lt;em&gt;equal opportunity&lt;/em&gt;, while the owners focus on the &lt;em&gt;disparate impact&lt;/em&gt;. A popular library for fairness, &lt;a href=&#34;https://aif360.readthedocs.io/en/latest/#&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AIF360&lt;/a&gt; has more than 70 metrics to measure fairness. Two most common used broad categories of fairness measures are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Group fairness&lt;/li&gt;
&lt;li&gt;Individual fairness&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;em&gt;impossibility theorem&lt;/em&gt; of fairness suggests that satisfying fairness with respect to all the definition can not be achievable, since one definition can contradict another. Furthermore, fairness in classification problem has been focused is most of the works, while fairness of regression or ranking problems is not yet well studied.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Choosing appropriate fairness metrics and optimizing them simultaneously is an important requirement engineering problem to be solved.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We found several interesting finding from our experiments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Only one fairness metric would not show the whole picture. There is no metric that combines multiples metric too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fairness metrics have their assumptions as well. Most of the group fairness metrics require the dataset divided into privileged and non-privileged. So, it can not compute unfairness among multiple groups (e.g., Asian, American, African, etc.) at the same time. Furthermore, the metrics measure fairness with respect to one protected attribute (&lt;em&gt;race&lt;/em&gt; or &lt;em&gt;sex&lt;/em&gt; or &lt;em&gt;age&lt;/em&gt;). A fair model with respect to &lt;em&gt;sex&lt;/em&gt; could be biased with respect to &lt;em&gt;age&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developers often tend to optimize the models for accuracy, which causes unfairness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The library APIs such as classifiers from &lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Scikit-Learn&lt;/a&gt; have several constructs that affect fairness. But those are not document and developers are aware of their fairness impacts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is often thought that if data is fair, the model would be so too. &lt;mark&gt;Although data has a great deal of impact of fairness of the decisions, a model could be fairer which used biased data&lt;/mark&gt;. At the same time, a model could be biased which was trained on unbiased data. We found that some data preparation techniques, thus, can have both positive or negative impact on fairness. Specifically, the data standardization and feature engineering (removal or creation) techniques affect fairness almost always.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;bias-mitigation&#34;&gt;Bias Mitigation&lt;/h2&gt;
&lt;p&gt;There are many bias mitigation techniques proposed in the literature, which are grouped into these categories:&lt;/p&gt;
&lt;!-- {style=&#34;color: red&#34;} --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Preprocessing techniques:&lt;/strong&gt; These techniques operate on the training data to make the resulting model fairer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In-processing techniques:&lt;/strong&gt; These techniques alters the existing mode.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Post-processing techniques:&lt;/strong&gt; The predictions are changes with some constraints to make them fairer.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Choosing a bias mitigation technique can be also confusing. Applying one mitigation technique can work for a particular metric and hamper accuracy as well as another fairness metric.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In our paper, we reported several observations that help to choose a mitigation technique for the model.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Effective preprocessing mitigation technique is preferable, since it does not ruin accuracy in most of the cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the model exhibits a lot of bias, post-processing techniques are the most successful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Originally fairer models are debiased effectively by preprocessing or in-processing
techniques.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;impacts&#34;&gt;Impacts&lt;/h2&gt;
&lt;p&gt;Fairnes does not come free. In most of models, there is a accuracy loss when the mitigation technique are applied. Multi-objective optimization could be utilized to improve fairness and accuracy together.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In-processing mitigation algorithms show uncertain behavior in their performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although post-processing algorithms are the most dominating in debiasing, they are always diminishing the model accuracy and F1 score.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trade-off between performance and fairness exists.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Overall, ensuring fairness require to address many dimensions of the problem at the same time. There is a wrong perception that only debiasing training data would suffice to make the model fair. The training is not always uniform and it does not learn from all the data instances equally. So, its needed to make the learning process better as well. Because of the tradeoff, multiple metrics, domain-specific issues, we need further testing and verification mechanisms as well. A few studies proposed fairness aware language constructs and test input generation techniques. However, we need further languages, tools, and methods to localize the fairness issue and repair them in real-world situations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ML Repo Dataset from GitHub</title>
      <link>https://sumonbis.github.io/project/github-dataset/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://sumonbis.github.io/project/github-dataset/</guid>
      <description>&lt;p&gt;Data science (DS) is everywhere now. The chart below shows the increasing number of publications with the topic “machine-learning” in the title. Also, the number of open source data science repositories in GitHub is growing very rapidly. Mining Software Repository have been very successful in recent times for SE research. Some datasets like &lt;em&gt;Dacapo&lt;/em&gt;, &lt;em&gt;Quallitas&lt;/em&gt; created new opportunity for MSR research. However, there is no dataset available to analyze DS software written in Python language. So, we created this dataset by mining open-source repositories from GitHub. The dataset was published in &lt;a href=&#34;https://sumonbis.github.io/publication/msr19/&#34;&gt;MSR 2019&lt;/a&gt;.&lt;/p&gt;














&lt;figure  id=&#34;figure-mined-data-from-github-ds-repositories&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Mined data from GitHub DS repositories&#34; srcset=&#34;
               /project/github-dataset/trend_hu2957a9f13c4dfc74f41ecccf55c83cd5_27281_453272fbc0e11653a2c50f7a3b49605f.png 400w,
               /project/github-dataset/trend_hu2957a9f13c4dfc74f41ecccf55c83cd5_27281_395ac01bc8541054539bb097da390d0c.png 760w,
               /project/github-dataset/trend_hu2957a9f13c4dfc74f41ecccf55c83cd5_27281_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://sumonbis.github.io/project/github-dataset/trend_hu2957a9f13c4dfc74f41ecccf55c83cd5_27281_453272fbc0e11653a2c50f7a3b49605f.png&#34;
               width=&#34;432&#34;
               height=&#34;248&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Mined data from GitHub DS repositories
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;We created a dataset that contains top rated 1,558 DS projects from Github that are written in Python.&lt;/li&gt;
&lt;li&gt;For storing and analyzing efficiently, we have stored the dataset in Hadoop sequence file.&lt;/li&gt;
&lt;li&gt;The dataset is available in &lt;a href=&#34;http://boa.cs.iastate.edu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Boa&lt;/a&gt; platform.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The details about the parsing, mining, and usage can be found &lt;a href=&#34;https://sumonbis.github.io/project/mining-ml/&#34;&gt;here&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;dataset-details&#34;&gt;Dataset Details&lt;/h2&gt;
&lt;p&gt;Different metrics of the dataset in showed in the table at the top. We used several filtering criteria to select top-rated data DS repositories. The properties of the dataset are:&lt;/p&gt;














&lt;figure  id=&#34;figure-filtering-criteria-to-select-github-repos&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Filtering criteria to select GitHub repos.&#34; srcset=&#34;
               /project/github-dataset/filtering_hu3fdd9194a17a6c0c3dc5b94305164096_101605_3d4b5db43492ea1e3e3151c7a34470a1.png 400w,
               /project/github-dataset/filtering_hu3fdd9194a17a6c0c3dc5b94305164096_101605_de2c44f83f085cb50c0c5a7f7b799442.png 760w,
               /project/github-dataset/filtering_hu3fdd9194a17a6c0c3dc5b94305164096_101605_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://sumonbis.github.io/project/github-dataset/filtering_hu3fdd9194a17a6c0c3dc5b94305164096_101605_3d4b5db43492ea1e3e3151c7a34470a1.png&#34;
               width=&#34;432&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Filtering criteria to select GitHub repos.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;Original (not forked) project with Python as the primary language.&lt;/li&gt;
&lt;li&gt;Contains at least one data science keywords like machine-learning, deep neural network in the description of the project. The whole list of keywords are as follows:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;machine learn&amp;quot;, &amp;quot;machine-learn&amp;quot;, &amp;quot;data sci&amp;quot;, &amp;quot;data-sci&amp;quot;, &amp;quot;big data&amp;quot;, &amp;quot;big-data&amp;quot;,
 &amp;quot;large data&amp;quot;, &amp;quot;large-data&amp;quot;, &amp;quot;data analy&amp;quot;, &amp;quot;data-analy&amp;quot;, &amp;quot;deep learn&amp;quot;, &amp;quot;deep-learn&amp;quot;,
 &amp;quot;data model&amp;quot;, &amp;quot;data-model&amp;quot;, &amp;quot;artificial intel&amp;quot;, &amp;quot;artificial-intel&amp;quot;, &amp;quot;mining&amp;quot;,
  &amp;quot;topic modelling&amp;quot;, &amp;quot;topic-modelling&amp;quot;, &amp;quot;natural language pro&amp;quot;, &amp;quot;natural-language-pro&amp;quot;,
  &amp;quot;nlp&amp;quot;, &amp;quot;data frame&amp;quot;, &amp;quot;data proces&amp;quot;, &amp;quot; ml &amp;quot;, &amp;quot;tensorflow&amp;quot;, &amp;quot;tensor flow&amp;quot;, &amp;quot;tensor-flow&amp;quot;,
  &amp;quot;theano&amp;quot;, &amp;quot;caffe&amp;quot;, &amp;quot;keras&amp;quot;, &amp;quot;scikit-learn&amp;quot;, &amp;quot;kaggle&amp;quot;, &amp;quot;spark&amp;quot;, &amp;quot;hadoop&amp;quot;, &amp;quot;mapreduce&amp;quot;,
  &amp;quot;hdfs&amp;quot;, &amp;quot;neural net&amp;quot;, &amp;quot;neural-net&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Contains at least one usage of data science library like Pytorch, Caffe, Keras, Tensorflow, etc. A full list of used 33 Python data science libraries are listed below:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;theano&amp;quot;, &amp;quot;pytroch&amp;quot;, &amp;quot;caffe&amp;quot;, &amp;quot;keras&amp;quot;, &amp;quot;tensorflow&amp;quot;, &amp;quot;sklearn&amp;quot;, &amp;quot;numpy&amp;quot;, &amp;quot;scipy&amp;quot;, &amp;quot;pandas&amp;quot;, &amp;quot;statsmodels&amp;quot;,
&amp;quot;matplotlib&amp;quot;, &amp;quot;seaborn&amp;quot;, &amp;quot;plotly&amp;quot;, &amp;quot;bokeh&amp;quot;, &amp;quot;pydot&amp;quot;, &amp;quot;xgboost&amp;quot;, &amp;quot;catboost&amp;quot;, &amp;quot;lightgbm&amp;quot;, &amp;quot;eli5&amp;quot;,
&amp;quot;elephas&amp;quot;, &amp;quot;spark&amp;quot;, &amp;quot;nltk&amp;quot;, &amp;quot;cntk&amp;quot;, &amp;quot;scrapy&amp;quot;, &amp;quot;gensim&amp;quot;, &amp;quot;pybrain&amp;quot;, &amp;quot;lightning&amp;quot;, &amp;quot;spacy&amp;quot;, &amp;quot;pylearn2&amp;quot;,
&amp;quot;nupic&amp;quot;, &amp;quot;pattern&amp;quot;, &amp;quot;imblearn&amp;quot;, &amp;quot;pyenv&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Each repository contains at least 80 star.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The dataset contains projects owned by both organizations and individual users. Some of the top rated projects are &lt;em&gt;Tensorflow Models, Keras, Scikit-learn, Pandas, Spacy, Spotify Luigi, NVIDIA FastPhotoStyle, Theano,&lt;/em&gt; etc.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A full list of all the 1,558 Github projects are available &lt;a href=&#34;https://github.com/boalang/MSR19-DataShowcase/blob/master/info.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;350 projects in the dataset are maintained by different organizations (Google, Microsoft, NVIDIA etc.). &lt;a href=&#34;https://github.com/boalang/MSR19-DataShowcase/blob/master/List-of-Organization.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The list of organizations is here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The rest 1,208 projects are maintained by individual users. &lt;a href=&#34;https://github.com/boalang/MSR19-DataShowcase/blob/master/List-of-Individual-Users.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The list of users is here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;availability&#34;&gt;Availability&lt;/h2&gt;
&lt;p&gt;The dataset is available in Boa infrastructure. Go to the &lt;a href=&#34;http://boa.cs.iastate.edu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Boa web interface&lt;/a&gt; and login. If you do not have an account, you can request a user.&lt;/p&gt;
&lt;p&gt;Then click on the &lt;a href=&#34;http://boa.cs.iastate.edu/boa/index.php?q=boa/run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;Run Examples&lt;/code&gt;&lt;/a&gt; menu and select &lt;code&gt;2020 August/Python-DS&lt;/code&gt; in the input dataset dropdown option. Finally, you can paste the Boa code and mine desired information.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The code, dataset details, and sample Boa queries are &lt;a href=&#34;https://github.com/boalang/MSR19-DataShowcase&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shared in this repository&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;To use the dataset go to &lt;a href=&#34;http://boa.cs.iastate.edu&#34;&gt;Boa website&lt;/a&gt; and
follow the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From the left menu, select User Login to login as a registered user. If you
are not registered, request for a user.&lt;/li&gt;
&lt;li&gt;Write a query under the Boa Source Code. If researchers are not familiar
with the language, the example Boa programs can be utilized by clicking the
Select Examples. Some good examples for this dataset can be also found from the
&lt;a href=&#34;https://github.com/boalang/MSR19-DataShowcase/tree/master/Boa_Queries&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github repository&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;2020 August/Python-DS&lt;/code&gt; dataset in the drop-down list under Input
Dataset and run the query.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The job will be submitted to Hadoop cluster and is executed parallely on the
dataset. When the job status is finished, the output text file will be available
for downloading. The job is saved for future reference. One can share the job
with others and one can reproduce the result.&lt;/p&gt;
&lt;p&gt;To learn about Boa language and queries, navigate through the Boa website,
especially &lt;a href=&#34;http://boa.cs.iastate.edu/docs/index.php&#34;&gt;Programming Guide Section&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Update: We have improved the framework to parse and mine Jupyter Notebooks along with the Python files.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Large-Scale Mining of Data-Science Software from GitHub</title>
      <link>https://sumonbis.github.io/project/mining-ml/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://sumonbis.github.io/project/mining-ml/</guid>
      <description>&lt;p&gt;The usage of data science (DS) techniques have increased immensely in the recent past. With the development of artificial intelligence (AI) and machine learning (ML) algorithms and availability of huge amount of data, there has been a rapid increase of using DS components in software. To enable further software engineering (SE) research of DS software in the wild, we built an infrastructure to mine and analyze DS software in large-scale. Our goal is to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learn from the past and guide future development of DS software&lt;/li&gt;
&lt;li&gt;Improve software design and reuse&lt;/li&gt;
&lt;li&gt;Manage DS software better&lt;/li&gt;
&lt;li&gt;Automatic bug detection and repair&lt;/li&gt;
&lt;li&gt;Many more &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We think that software engineering research for DS systems is necessary. To that end, we leveraged the huge amount of code and metadata available in open-source GitHub repositories. We proposed a methodology of filtering high-quality DS repositories and then mined code of each revision and project metadata e.g., number of developers, commit logs, creation-date, etc.&lt;/p&gt;
&lt;!-- 













&lt;figure  id=&#34;figure-mined-data-from-github-ds-repositories&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;dataset.png&#34; alt=&#34;Mined data from GitHub DS repositories&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Mined data from GitHub DS repositories
    &lt;/figcaption&gt;&lt;/figure&gt; --&gt;
&lt;p&gt;We used the existing &lt;a href=&#34;http://boa.cs.iastate.edu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Boa&lt;/a&gt; framework to mine from GitHub. Python has been used as a de-facto of ML based software for a long time now. However, Boa could not parse and mine Python code. Therefore, I built the infrastructure to parse the Python code, transform that into AST, and store in Boa&amp;rsquo;s Protobuf format for storing. I used &lt;a href=&#34;https://www.antlr.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ANTLR&lt;/a&gt; grammar for Python 2 and Python 3 for parsing the source. Finally, the dataset is stored in the Hadoop cluster for further analysis. You can learn about how to use the Boa for mining new datasets from &lt;a href=&#34;https://sumonbis.github.io/post/boa-tutorial/&#34;&gt;this tutorial&lt;/a&gt;. The first version of the dataset contained about 5 million Python files (including all revisions) from top rated 1558 DS repositories.&lt;/p&gt;














&lt;figure  id=&#34;figure-the-first-version-of-the-mined-dataset&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;The first version of the mined dataset&#34; srcset=&#34;
               /project/mining-ml/data_hu10570a67aa14b827085367c50d3935f2_71196_72ff55399386f4a597998fe540e0d2a9.png 400w,
               /project/mining-ml/data_hu10570a67aa14b827085367c50d3935f2_71196_6001210ad4ebce11c638de78026a1845.png 760w,
               /project/mining-ml/data_hu10570a67aa14b827085367c50d3935f2_71196_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://sumonbis.github.io/project/mining-ml/data_hu10570a67aa14b827085367c50d3935f2_71196_72ff55399386f4a597998fe540e0d2a9.png&#34;
               width=&#34;288&#34;
               height=&#34;344&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      The first version of the mined dataset
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The rich amount of data facilitates analyzing several research questions:&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;Data science development practices:&lt;/mark&gt; Due to the recent ‘boom’ in machine learning software development, a lot of questions regearing DS best practices can be asked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are the most used data preprocessing library?&lt;/li&gt;
&lt;li&gt;Why data dimension bugs are more frequent in deep neural networks?&lt;/li&gt;
&lt;li&gt;What data visualization APIs are most used in last two years?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;mark&gt;Software change:&lt;/mark&gt; Since the dataset contains all the snapshots of Python files, how developers change source can be studied.&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;Program analysis:&lt;/mark&gt; The differences between traditional and DS software development can be studied. For example, do the code complexity or API usages follow similar pattern in DS software?&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;SE practices:&lt;/mark&gt; Several SE research can be conducted on the DS projects in the area of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DS bug detection and repair&lt;/li&gt;
&lt;li&gt;Code comprehension&lt;/li&gt;
&lt;li&gt;Testing DS modules&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;mark&gt;Project metadata:&lt;/mark&gt; The project metadata can be leveraged to answer questions such as, what are the coding style differences between projects developed by individuals and organizations, etc.&lt;/p&gt;
&lt;p&gt;Further details about the dataset can be found here. The domain-specific Boa language helps to perform program analysis query the metadata easily and quickly. For example, the following code snippet quickly count the number of bug-fixing revisions for all the projects in the dataset.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Counting the number of bug-fixing revisons for all projects
p: Project = input;
counts: output sum[string] of int;

visit(p, visitor {
	before n: Project -&amp;gt; ;
	before node: CodeRepository -&amp;gt; ;
	before node: Revision -&amp;gt;
		if (isfixingrevision(node.log))
			counts[p.name] &amp;lt;&amp;lt; 1;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to go deeper and mine the all the method calls in the bug-fixing revisions, we can use the following Boa program.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;a href=&#34;http://boa.cs.iastate.edu/boa/?q=boa/job/public/88574&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Example Boa program&lt;/a&gt; for mining method calls in the bug fixing commits.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that the output contains 74.11 million results. We use commit logs to identify whether it&amp;rsquo;s a bug-fixing revision or not and then visit the expression to get the method calls. Boa uses automatic parallelization to run the query in Haddop cluster. Users do not need to worry about the storage and low-level details.&lt;/p&gt;
&lt;p&gt;As of this writing, no open source dataset for studying Data Science software is available. We created a infrastructure and dataset to mins DS projects from GitHub that are using Python.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
